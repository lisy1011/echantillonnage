{
	"variables": [],
	"info": {
		"name": "Requêtes TP-2, 420-02E-FX, WS twitface",
		"_postman_id": "62285439-e379-9e1f-426e-77046879722e",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Initialisations",
			"description": "Chargement des données\nDestruction des données\nStatistiques",
			"item": [
				{
					"name": "{{url_base}}/load-data",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"tests[\"Content-Type est HTML et UTF-8\"] = postman.getResponseHeader(\"Content-Type\") === \"text/html; charset=utf-8\";"
								]
							}
						}
					],
					"request": {
						"url": "{{url_base}}/load-data",
						"method": "POST",
						"header": [],
						"body": {},
						"description": "Création de toutes les données."
					},
					"response": [
						{
							"id": "6972db21-2051-46cb-825f-2218273d72e9",
							"name": "Résultat : Chargement des données",
							"originalRequest": {
								"url": "{{url_base}}/load-data",
								"method": "POST",
								"header": [],
								"body": {}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "html",
							"_postman_previewtype": "text",
							"header": [
								{
									"name": "cache-control",
									"key": "cache-control",
									"value": "no-cache",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"name": "content-length",
									"key": "content-length",
									"value": "667",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"name": "content-type",
									"key": "content-type",
									"value": "text/html; charset=utf-8",
									"description": "The mime type of this content"
								},
								{
									"name": "date",
									"key": "date",
									"value": "Fri, 29 Sep 2017 19:41:36 GMT",
									"description": "The date and time that the message was sent"
								},
								{
									"name": "server",
									"key": "server",
									"value": "Development/2.0",
									"description": "A name for the server"
								}
							],
							"cookie": [],
							"responseTime": 39039,
							"body": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"fr\" xml:lang=\"fr\">\n<head>\n\t<meta charset=\"utf-8\" />\n\t<title>TP-2 WS twitface :: Chargement des données</title>\n\t<style>\n\t\t.resultat {color:#090;}\n\t\t.temps {color:#950;}\n\t\t.resultat, .temps {font-weight:bold;}\n\t</style>\n</head>\n<body>\n\t<h1>Chargement des données</h1>\n\t<p class=\"resultat\">400 membres ont été créés.</p>\t<p class=\"resultat\">4335 relations d'amitié ont été créées.</p>\n\t<p class=\"resultat\">799 demandes d'amitié ont été créées.</p>\n\t<p class=\"resultat\">1007 publications ont été créés.</p>\n\t<p class=\"temps\">Temps d'exécution : 38.8190000057sec. </p>\n</body>\n</html>\n"
						}
					]
				},
				{
					"name": "{{url_base}}/stats",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Content-Type est HTML et UTF-8\"] = postman.getResponseHeader(\"Content-Type\") === \"text/html; charset=utf-8\";"
								]
							}
						}
					],
					"request": {
						"url": "{{url_base}}/stats",
						"method": "GET",
						"header": [],
						"body": {},
						"description": "Statistiques sur les données."
					},
					"response": [
						{
							"id": "dfa5c981-0fee-47c1-bd4d-996873325223",
							"name": "Résultat : Statistiques après destruction des données",
							"originalRequest": {
								"url": "{{url_base}}/stats",
								"method": "GET",
								"header": [],
								"body": {}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"_postman_previewtype": "text",
							"header": [
								{
									"name": "cache-control",
									"key": "cache-control",
									"value": "no-cache",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"name": "content-length",
									"key": "content-length",
									"value": "607",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"name": "content-type",
									"key": "content-type",
									"value": "text/html; charset=utf-8",
									"description": "The mime type of this content"
								},
								{
									"name": "date",
									"key": "date",
									"value": "Fri, 29 Sep 2017 19:56:23 GMT",
									"description": "The date and time that the message was sent"
								},
								{
									"name": "server",
									"key": "server",
									"value": "Development/2.0",
									"description": "A name for the server"
								}
							],
							"cookie": [],
							"responseTime": 569,
							"body": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"fr\" xml:lang=\"fr\">\n<head>\n\t<meta charset=\"utf-8\" />\n\t<title>TP-2 WS twitface :: Statistiques</title>\n\t<style>\n\t\t.resultat {color:#090;}\n\t\t.temps {color:#950;}\n\t\t.resultat, .temps {font-weight:bold;}\n\t</style>\n</head>\n<body>\n\t<h1>Statistiques</h1>\n\t<p class=\"resultat\">0 membres existants.</p>\n\t<p class=\"resultat\">0 relations d'amitié existantes.</p>\n\t<p class=\"resultat\">3 demandes d'amitié existantes.</p>\n\t<p class=\"resultat\">8 publications existantes.</p>\n\t<p class=\"temps\">Temps d'exécution : 0.0749998092651sec. </p>\n</body>\n</html>\n"
						},
						{
							"id": "d53bcf3f-3169-42f4-b5e1-d5db4222b650",
							"name": "Résultat : Statistiques après chargement des données",
							"originalRequest": {
								"url": "{{url_base}}/stats",
								"method": "GET",
								"header": [],
								"body": {}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"_postman_previewtype": "text",
							"header": [
								{
									"name": "cache-control",
									"key": "cache-control",
									"value": "no-cache",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"name": "content-length",
									"key": "content-length",
									"value": "615",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"name": "content-type",
									"key": "content-type",
									"value": "text/html; charset=utf-8",
									"description": "The mime type of this content"
								},
								{
									"name": "date",
									"key": "date",
									"value": "Fri, 29 Sep 2017 20:04:05 GMT",
									"description": "The date and time that the message was sent"
								},
								{
									"name": "server",
									"key": "server",
									"value": "Development/2.0",
									"description": "A name for the server"
								}
							],
							"cookie": [],
							"responseTime": 18339,
							"body": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"fr\" xml:lang=\"fr\">\n<head>\n\t<meta charset=\"utf-8\" />\n\t<title>TP-2 WS twitface :: Statistiques</title>\n\t<style>\n\t\t.resultat {color:#090;}\n\t\t.temps {color:#950;}\n\t\t.resultat, .temps {font-weight:bold;}\n\t</style>\n</head>\n<body>\n\t<h1>Statistiques</h1>\n\t<p class=\"resultat\">400 membres existants.</p>\n\t<p class=\"resultat\">4335 relations d'amitié existantes.</p>\n\t<p class=\"resultat\">799 demandes d'amitié existantes.</p>\n\t<p class=\"resultat\">1007 publications existantes.</p>\n\t<p class=\"temps\">Temps d'exécution : 17.9129998684sec. </p>\n</body>\n</html>\n"
						}
					]
				},
				{
					"name": "{{url_base}}/delete-data",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Content-Type est HTML et UTF-8\"] = postman.getResponseHeader(\"Content-Type\") === \"text/html; charset=utf-8\";"
								]
							}
						}
					],
					"request": {
						"url": "{{url_base}}/delete-data",
						"method": "DELETE",
						"header": [],
						"body": {},
						"description": "Destruction de toutes les données."
					},
					"response": [
						{
							"id": "75d362ce-9b8f-4bd4-9b07-14b68339b6d8",
							"name": "Résultat : Destruction des données",
							"originalRequest": {
								"url": "{{url_base}}/delete-data",
								"method": "DELETE",
								"header": [],
								"body": {}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"_postman_previewtype": "text",
							"header": [
								{
									"name": "cache-control",
									"key": "cache-control",
									"value": "no-cache",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"name": "content-length",
									"key": "content-length",
									"value": "608",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"name": "content-type",
									"key": "content-type",
									"value": "text/html; charset=utf-8",
									"description": "The mime type of this content"
								},
								{
									"name": "date",
									"key": "date",
									"value": "Thu, 05 Oct 2017 13:47:51 GMT",
									"description": "The date and time that the message was sent"
								},
								{
									"name": "server",
									"key": "server",
									"value": "Development/2.0",
									"description": "A name for the server"
								}
							],
							"cookie": [],
							"responseTime": 37521,
							"body": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"fr\" xml:lang=\"fr\">\n<head>\n\t<meta charset=\"utf-8\" />\n\t<title>TP-2 WS twitface :: Destruction des données</title>\n\t<style>\n\t\t.resultat {color:#090;}\n\t\t.temps {color:#950;}\n\t\t.resultat, .temps {font-weight:bold;}\n\t</style>\n</head>\n<body>\n\t<h1>Destruction des données</h1>\n\t<p class=\"resultat\">400 membres ont été détruits.</p>\n\t<p class=\"resultat\">799 demandes d'amitié ont été détruites.</p>\n\t<p class=\"resultat\">1012 publications ont été détruites.</p>\n\t<p class=\"temps\">Temps d'exécution : 37.0650000572sec. </p>\n</body>\n</html>\n"
						}
					]
				}
			]
		},
		{
			"name": "Recherches de membres",
			"description": "",
			"item": [
				{
					"name": "{{url_base}}/membres",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Content-Type est JSON et UTF-8\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json; charset=utf-8\";",
									"",
									"// Récupération des données reçues au format JSON.",
									"var tabMembresRecus = JSON.parse(responseBody);",
									"",
									"// Taille du tableau de données attendu dans la réponse JSON.",
									"var nbMembresAttendu = 20;",
									"tests[\"Nb de membres retournés\"] = tabMembresRecus.length === nbMembresAttendu;",
									"",
									"// Chargement du schéma de données JSON à partir de l'environnement.",
									"const jsonSchemaTabMembres = JSON.parse(environment.json_schema_tab_membres);",
									"// Validation selon le schéma de données JSON.",
									"tests[\"JSON respecte le schéma pour un tableau de membres\"] = tv4.validate(tabMembresRecus, jsonSchemaTabMembres);",
									"if (tv4.error !== null)",
									"    console.log(\"Message de validation schéma JSON (tableau de membres) : \", tv4.error);",
									"",
									"if (tabMembresRecus.length >= 1) {",
									"    tests[\"Pas de champs supplémentaires JSON\"] = Object.keys(tabMembresRecus[0]).length === Object.keys(jsonSchemaTabMembres.items.properties).length;",
									"}",
									"",
									"// Tests : Premier membre:",
									"if (tabMembresRecus.length >= 1) {",
									"    tests[\"Premier membre retourné est Ursa Abbott\"] = (tabMembresRecus[0].prenom === \"Ursa\" && tabMembresRecus[0].nom_famille === \"Abbott\");",
									"    tests[\"Premier membre : id\"] = tabMembresRecus[0].id === 295;",
									"    tests[\"Premier membre : courriel\"] = tabMembresRecus[0].courriel === \"et@Etiam.com\";",
									"    tests[\"Premier membre : date_naissance\"] = tabMembresRecus[0].date_naissance === \"1969-10-15\";",
									"    tests[\"Premier membre : sexe\"] = tabMembresRecus[0].sexe === \"F\";",
									"    tests[\"Premier membre : nom_util\"] = tabMembresRecus[0].nom_util === \"ursabb\";",
									"    tests[\"Premier membre : ville_actuelle\"] = tabMembresRecus[0].ville_actuelle === \"Longview\";",
									"    tests[\"Premier membre : ville_origine\"] = tabMembresRecus[0].ville_origine === \"Duluth\";",
									"}",
									"",
									"// Tests : Dernier membre:",
									"if (tabMembresRecus.length >= nbMembresAttendu) {",
									"    tests[\"Dernier membre retourné est Oscar Bass\"] = (tabMembresRecus[nbMembresAttendu-1].prenom === \"Oscar\" && tabMembresRecus[nbMembresAttendu-1].nom_famille === \"Bass\");",
									"    tests[\"Dernier membre : id\"] = tabMembresRecus[nbMembresAttendu-1].id === 141;",
									"    tests[\"Dernier membre : courriel\"] = tabMembresRecus[nbMembresAttendu-1].courriel === \"mauris.Integer@estMauris.edu\";",
									"    tests[\"Dernier membre : date_naissance\"] = tabMembresRecus[nbMembresAttendu-1].date_naissance === \"1965-10-17\";",
									"    tests[\"Dernier membre : sexe\"] = tabMembresRecus[nbMembresAttendu-1].sexe === \"M\";",
									"    tests[\"Dernier membre : nom_util\"] = tabMembresRecus[nbMembresAttendu-1].nom_util === \"oscbas\";",
									"    tests[\"Dernier membre : ville_actuelle\"] = tabMembresRecus[nbMembresAttendu-1].ville_actuelle === \"Rialto\";",
									"    tests[\"Dernier membre : ville_origine\"] = tabMembresRecus[nbMembresAttendu-1].ville_origine === \"Highland Park\";",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url_base}}/membres",
						"method": "GET",
						"header": [],
						"body": {},
						"description": "Recherche de membres avec aucune critère spécifié."
					},
					"response": [
						{
							"id": "ece2301c-969c-4c2f-8ab0-094a7e41408f",
							"name": "Les 20 premiers membres en ordre de nom de famille et puis de prénom.",
							"originalRequest": {
								"url": "{{url_base}}/membres",
								"method": "GET",
								"header": [],
								"body": {}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "text",
							"header": [
								{
									"name": "cache-control",
									"key": "cache-control",
									"value": "no-cache",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"name": "content-length",
									"key": "content-length",
									"value": "4545",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"name": "content-type",
									"key": "content-type",
									"value": "application/json; charset=utf-8",
									"description": "The mime type of this content"
								},
								{
									"name": "date",
									"key": "date",
									"value": "Fri, 29 Sep 2017 23:46:51 GMT",
									"description": "The date and time that the message was sent"
								},
								{
									"name": "server",
									"key": "server",
									"value": "Development/2.0",
									"description": "A name for the server"
								}
							],
							"cookie": [],
							"responseTime": 5609,
							"body": "[{\"sexe\": \"F\", \"prenom\": \"Ursa\", \"ville_origine\": \"Duluth\", \"nom_util\": \"ursabb\", \"nom_famille\": \"Abbott\", \"date_naissance\": \"1969-10-15\", \"courriel\": \"et@Etiam.com\", \"ville_actuelle\": \"Longview\", \"id\": 295}, {\"sexe\": \"F\", \"prenom\": \"Amy\", \"ville_origine\": \"East St. Louis\", \"nom_util\": \"amyadk\", \"nom_famille\": \"Adkins\", \"date_naissance\": \"1985-12-27\", \"courriel\": \"risus.quis.diam@leoVivamusnibh.com\", \"ville_actuelle\": \"Indianapolis\", \"id\": 278}, {\"sexe\": \"F\", \"prenom\": \"Halee\", \"ville_origine\": \"Olean\", \"nom_util\": \"halagu\", \"nom_famille\": \"Aguirre\", \"date_naissance\": \"1965-06-08\", \"courriel\": \"parturient.montes@egestas.org\", \"ville_actuelle\": \"Ponce\", \"id\": 289}, {\"sexe\": \"M\", \"prenom\": \"Vincent\", \"ville_origine\": \"Manhattan Beach\", \"nom_util\": \"vinagu\", \"nom_famille\": \"Aguirre\", \"date_naissance\": \"1988-02-18\", \"courriel\": \"mauris.erat@quistristique.edu\", \"ville_actuelle\": \"Norwich\", \"id\": 158}, {\"sexe\": \"M\", \"prenom\": \"Yoshio\", \"ville_origine\": \"Lockport\", \"nom_util\": \"yosalf\", \"nom_famille\": \"Alford\", \"date_naissance\": \"1974-08-08\", \"courriel\": \"netus.et@euenim.org\", \"ville_actuelle\": \"Diamond Bar\", \"id\": 194}, {\"sexe\": \"F\", \"prenom\": \"Cameran\", \"ville_origine\": \"Corinth\", \"nom_util\": \"camals\", \"nom_famille\": \"Alston\", \"date_naissance\": \"1972-02-25\", \"courriel\": \"nonummy@Nunc.com\", \"ville_actuelle\": \"Wilmington\", \"id\": 281}, {\"sexe\": \"M\", \"prenom\": \"Noah\", \"ville_origine\": \"Yazoo City\", \"nom_util\": \"noaarn\", \"nom_famille\": \"Arnold\", \"date_naissance\": \"1980-01-19\", \"courriel\": \"pretium.aliquet@sit.edu\", \"ville_actuelle\": \"Hartford\", \"id\": 200}, {\"sexe\": \"F\", \"prenom\": \"Pamela\", \"ville_origine\": \"Woodward\", \"nom_util\": \"pamash\", \"nom_famille\": \"Ashley\", \"date_naissance\": \"1985-10-06\", \"courriel\": \"malesuada@nonummyutmolestie.edu\", \"ville_actuelle\": \"Rosemead\", \"id\": 292}, {\"sexe\": \"M\", \"prenom\": \"Hammett\", \"ville_origine\": \"Corona\", \"nom_util\": \"hamatk\", \"nom_famille\": \"Atkinson\", \"date_naissance\": \"1983-02-08\", \"courriel\": \"mattis.ornare@augueacipsum.org\", \"ville_actuelle\": \"Wichita\", \"id\": 175}, {\"sexe\": \"M\", \"prenom\": \"Levi\", \"ville_origine\": \"Miami Gardens\", \"nom_util\": \"levavi\", \"nom_famille\": \"Avila\", \"date_naissance\": \"1981-12-08\", \"courriel\": \"dolor.Quisque.tincidunt@luctus.com\", \"ville_actuelle\": \"Grass Valley\", \"id\": 22}, {\"sexe\": \"F\", \"prenom\": \"Jane\", \"ville_origine\": \"Sanford\", \"nom_util\": \"janbai\", \"nom_famille\": \"Bailey\", \"date_naissance\": \"1988-09-17\", \"courriel\": \"Mauris.vestibulum.neque@enimnon.org\", \"ville_actuelle\": \"Elko\", \"id\": 209}, {\"sexe\": \"F\", \"prenom\": \"Ivana\", \"ville_origine\": \"Brookfield\", \"nom_util\": \"ivabak\", \"nom_famille\": \"Baker\", \"date_naissance\": \"1982-05-02\", \"courriel\": \"malesuada.id@non.ca\", \"ville_actuelle\": \"Seattle\", \"id\": 217}, {\"sexe\": \"F\", \"prenom\": \"Heather\", \"ville_origine\": \"Basin\", \"nom_util\": \"heabal\", \"nom_famille\": \"Ballard\", \"date_naissance\": \"1954-01-02\", \"courriel\": \"Cras.lorem.lorem@lectus.org\", \"ville_actuelle\": \"Perth Amboy\", \"id\": 247}, {\"sexe\": \"F\", \"prenom\": \"Amber\", \"ville_origine\": \"Monrovia\", \"nom_util\": \"ambbar\", \"nom_famille\": \"Barlow\", \"date_naissance\": \"1963-09-29\", \"courriel\": \"sem@molestie.org\", \"ville_actuelle\": \"South Pasadena\", \"id\": 286}, {\"sexe\": \"M\", \"prenom\": \"Wyatt\", \"ville_origine\": \"Manhattan Beach\", \"nom_util\": \"wyabar\", \"nom_famille\": \"Barr\", \"date_naissance\": \"1975-02-05\", \"courriel\": \"est.ac.facilisis@tempusmauris.com\", \"ville_actuelle\": \"Garden Grove\", \"id\": 152}, {\"sexe\": \"M\", \"prenom\": \"Boris\", \"ville_origine\": \"Denver\", \"nom_util\": \"borbar\", \"nom_famille\": \"Barrera\", \"date_naissance\": \"1984-02-26\", \"courriel\": \"semper.auctor.Mauris@mattisCras.ca\", \"ville_actuelle\": \"Oxford\", \"id\": 7}, {\"sexe\": \"M\", \"prenom\": \"Zachary\", \"ville_origine\": \"Lynchburg\", \"nom_util\": \"zacbar\", \"nom_famille\": \"Barrett\", \"date_naissance\": \"1950-10-18\", \"courriel\": \"ut@diamlorem.com\", \"ville_actuelle\": \"Brownsville\", \"id\": 162}, {\"sexe\": \"F\", \"prenom\": \"Petra\", \"ville_origine\": \"Biloxi\", \"nom_util\": \"petbar\", \"nom_famille\": \"Barron\", \"date_naissance\": \"1958-11-04\", \"courriel\": \"Pellentesque.ut@ullamcorpernislarcu.org\", \"ville_actuelle\": \"Houston\", \"id\": 216}, {\"sexe\": \"M\", \"prenom\": \"Jeremy\", \"ville_origine\": \"Norwich\", \"nom_util\": \"jerbar\", \"nom_famille\": \"Barton\", \"date_naissance\": \"1966-03-14\", \"courriel\": \"Fusce.dolor@eumetus.edu\", \"ville_actuelle\": \"Lancaster\", \"id\": 138}, {\"sexe\": \"M\", \"prenom\": \"Oscar\", \"ville_origine\": \"Highland Park\", \"nom_util\": \"oscbas\", \"nom_famille\": \"Bass\", \"date_naissance\": \"1965-10-17\", \"courriel\": \"mauris.Integer@estMauris.edu\", \"ville_actuelle\": \"Rialto\", \"id\": 141}]"
						}
					]
				},
				{
					"name": "{{url_base}}/membres?nom=  aguirre",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Content-Type est JSON et UTF-8\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json; charset=utf-8\";",
									"",
									"// Récupération des données reçues au format JSON.",
									"var tabMembresRecus = JSON.parse(responseBody);",
									"",
									"// Taille du tableau de données attendu dans la réponse JSON.",
									"var nbMembresAttendu = 2;",
									"tests[\"Nb de membres retournés\"] = tabMembresRecus.length === nbMembresAttendu;",
									"",
									"// Chargement du schéma de données JSON à partir de l'environnement.",
									"const jsonSchemaTabMembres = JSON.parse(environment.json_schema_tab_membres);",
									"// Validation selon le schéma de données JSON.",
									"tests[\"JSON respecte le schéma pour un tableau de membres\"] = tv4.validate(tabMembresRecus, jsonSchemaTabMembres);",
									"",
									"if (tv4.error !== null)",
									"    console.log(\"Message de validation schéma JSON (tableau de membres) : \", tv4.error);",
									"",
									"if (tabMembresRecus.length >= 1) {",
									"    tests[\"Pas de champs supplémentaires JSON\"] = Object.keys(tabMembresRecus[0]).length === Object.keys(jsonSchemaTabMembres.items.properties).length;",
									"}",
									"",
									"// Tests : Premier membre:",
									"if (tabMembresRecus.length >= 1) {",
									"    tests[\"Premier membre retourné est Halee Aguirre\"] = (tabMembresRecus[0].prenom === \"Halee\" && tabMembresRecus[0].nom_famille === \"Aguirre\");",
									"    tests[\"Premier membre : id\"] = tabMembresRecus[0].id === 289;",
									"    tests[\"Premier membre : courriel\"] = tabMembresRecus[0].courriel === \"parturient.montes@egestas.org\";",
									"    tests[\"Premier membre : date_naissance\"] = tabMembresRecus[0].date_naissance === \"1965-06-08\";",
									"    tests[\"Premier membre : sexe\"] = tabMembresRecus[0].sexe === \"F\";",
									"    tests[\"Premier membre : nom_util\"] = tabMembresRecus[0].nom_util === \"halagu\";",
									"    tests[\"Premier membre : ville_actuelle\"] = tabMembresRecus[0].ville_actuelle === \"Ponce\";",
									"    tests[\"Premier membre : ville_origine\"] = tabMembresRecus[0].ville_origine === \"Olean\";",
									"}",
									"",
									"// Tests : Dernier membre:",
									"if (tabMembresRecus.length >= nbMembresAttendu) {",
									"    tests[\"Dernier membre retourné est Vincent Aguirre\"] = (tabMembresRecus[nbMembresAttendu-1].prenom === \"Vincent\" && tabMembresRecus[nbMembresAttendu-1].nom_famille === \"Aguirre\");",
									"    tests[\"Dernier membre : id\"] = tabMembresRecus[nbMembresAttendu-1].id === 158;",
									"    tests[\"Dernier membre : courriel\"] = tabMembresRecus[nbMembresAttendu-1].courriel === \"mauris.erat@quistristique.edu\";",
									"    tests[\"Dernier membre : date_naissance\"] = tabMembresRecus[nbMembresAttendu-1].date_naissance === \"1988-02-18\";",
									"    tests[\"Dernier membre : sexe\"] = tabMembresRecus[nbMembresAttendu-1].sexe === \"M\";",
									"    tests[\"Dernier membre : nom_util\"] = tabMembresRecus[nbMembresAttendu-1].nom_util === \"vinagu\";",
									"    tests[\"Dernier membre : ville_actuelle\"] = tabMembresRecus[nbMembresAttendu-1].ville_actuelle === \"Norwich\";",
									"    tests[\"Dernier membre : ville_origine\"] = tabMembresRecus[nbMembresAttendu-1].ville_origine === \"Manhattan Beach\";",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"url": {
							"raw": "{{url_base}}/membres?nom=  aguirre",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"membres"
							],
							"query": [
								{
									"key": "nom",
									"value": "  aguirre",
									"equals": true,
									"description": ""
								}
							],
							"variable": []
						},
						"method": "GET",
						"header": [],
						"body": {},
						"description": "Recherche de membres ayant \"Aguirre\" comme prénom ou nom de famille.\nVérification du retrait des espaces superflus."
					},
					"response": [
						{
							"id": "a731c1d8-7388-42c2-a603-99022138c15d",
							"name": "2 membre ont \"Aguirre\" comme nom de famille",
							"originalRequest": {
								"url": {
									"raw": "{{url_base}}/membres?nom=  aguirre",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"membres"
									],
									"query": [
										{
											"key": "nom",
											"value": "  aguirre",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [],
								"body": {}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "text",
							"header": [
								{
									"name": "cache-control",
									"key": "cache-control",
									"value": "no-cache",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"name": "content-length",
									"key": "content-length",
									"value": "460",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"name": "content-type",
									"key": "content-type",
									"value": "application/json; charset=utf-8",
									"description": "The mime type of this content"
								},
								{
									"name": "date",
									"key": "date",
									"value": "Fri, 29 Sep 2017 23:51:05 GMT",
									"description": "The date and time that the message was sent"
								},
								{
									"name": "server",
									"key": "server",
									"value": "Development/2.0",
									"description": "A name for the server"
								}
							],
							"cookie": [],
							"responseTime": 1488,
							"body": "[{\"id\": 289, \"courriel\": \"parturient.montes@egestas.org\", \"nom_famille\": \"Aguirre\", \"date_naissance\": \"1965-06-08\", \"sexe\": \"F\", \"nom_util\": \"halagu\", \"ville_actuelle\": \"Ponce\", \"ville_origine\": \"Olean\", \"prenom\": \"Halee\"}, {\"id\": 158, \"courriel\": \"mauris.erat@quistristique.edu\", \"nom_famille\": \"Aguirre\", \"date_naissance\": \"1988-02-18\", \"sexe\": \"M\", \"nom_util\": \"vinagu\", \"ville_actuelle\": \"Norwich\", \"ville_origine\": \"Manhattan Beach\", \"prenom\": \"Vincent\"}]"
						}
					]
				},
				{
					"name": "{{url_base}}/membres?nom=AmiR",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Content-Type est JSON et UTF-8\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json; charset=utf-8\";",
									"",
									"// Récupération des données reçues au format JSON.",
									"var tabMembresRecus = JSON.parse(responseBody);",
									"",
									"// Taille du tableau de données attendu dans la réponse JSON.",
									"var nbMembresAttendu = 3;",
									"tests[\"Nb de membres retournés\"] = tabMembresRecus.length === nbMembresAttendu;",
									"",
									"// Chargement du schéma de données JSON à partir de l'environnement.",
									"const jsonSchemaTabMembres = JSON.parse(environment.json_schema_tab_membres);",
									"// Validation selon le schéma de données JSON.",
									"tests[\"JSON respecte le schéma pour un tableau de membres\"] = tv4.validate(tabMembresRecus, jsonSchemaTabMembres);",
									"if (tv4.error !== null)",
									"    console.log(\"Message de validation schéma JSON (tableau de membres) : \", tv4.error);",
									"",
									"if (tabMembresRecus.length >= 1) {",
									"    tests[\"Pas de champs supplémentaires JSON\"] = Object.keys(tabMembresRecus[0]).length === Object.keys(jsonSchemaTabMembres.items.properties).length;",
									"}",
									"",
									"// Tests : Premier membre:",
									"if (tabMembresRecus.length >= 1) {",
									"    tests[\"Premier membre retourné est Amir Miranda\"] = (tabMembresRecus[0].prenom === \"Amir\" && tabMembresRecus[0].nom_famille === \"Miranda\");",
									"    tests[\"Premier membre : id\"] = tabMembresRecus[0].id === 116;",
									"    tests[\"Premier membre : courriel\"] = tabMembresRecus[0].courriel === \"feugiat.tellus@dignissimMaecenasornare.edu\";",
									"    tests[\"Premier membre : date_naissance\"] = tabMembresRecus[0].date_naissance === \"1980-11-01\";",
									"    tests[\"Premier membre : sexe\"] = tabMembresRecus[0].sexe === \"M\";",
									"    tests[\"Premier membre : nom_util\"] = tabMembresRecus[0].nom_util === \"amimir\";",
									"    tests[\"Premier membre : ville_actuelle\"] = tabMembresRecus[0].ville_actuelle === \"Lansing\";",
									"    tests[\"Premier membre : ville_origine\"] = tabMembresRecus[0].ville_origine === \"Oro Valley\";",
									"}",
									"",
									"// Tests : Dernier membre:",
									"if (tabMembresRecus.length >= nbMembresAttendu) {",
									"    tests[\"Dernier membre retourné est Amir Woods\"] = (tabMembresRecus[nbMembresAttendu-1].prenom === \"Amir\" && tabMembresRecus[nbMembresAttendu-1].nom_famille === \"Woods\");",
									"    tests[\"Dernier membre : id\"] = tabMembresRecus[nbMembresAttendu-1].id === 177;",
									"    tests[\"Dernier membre : courriel\"] = tabMembresRecus[nbMembresAttendu-1].courriel === \"non.egestas@facilisisvitaeorci.ca\";",
									"    tests[\"Dernier membre : date_naissance\"] = tabMembresRecus[nbMembresAttendu-1].date_naissance === \"1966-08-17\";",
									"    tests[\"Dernier membre : sexe\"] = tabMembresRecus[nbMembresAttendu-1].sexe === \"M\";",
									"    tests[\"Dernier membre : nom_util\"] = tabMembresRecus[nbMembresAttendu-1].nom_util === \"amiwoo\";",
									"    tests[\"Dernier membre : ville_actuelle\"] = tabMembresRecus[nbMembresAttendu-1].ville_actuelle === \"LaGrange\";",
									"    tests[\"Dernier membre : ville_origine\"] = tabMembresRecus[nbMembresAttendu-1].ville_origine === \"Revere\";",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"url": {
							"raw": "{{url_base}}/membres?nom=AmiR",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"membres"
							],
							"query": [
								{
									"key": "nom",
									"value": "AmiR",
									"equals": true,
									"description": ""
								}
							],
							"variable": []
						},
						"method": "GET",
						"header": [],
						"body": {},
						"description": "Recherche de membres ayant \"Amir\" comme prénom ou nom de famille.\nVérification de l'insensibilité à la casse."
					},
					"response": [
						{
							"id": "302565ce-22f4-4199-aaa0-f66c43485c1b",
							"name": "3 membres ont \"Amir\" comme prénom.",
							"originalRequest": {
								"url": {
									"raw": "{{url_base}}/membres?nom=AmiR",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"membres"
									],
									"query": [
										{
											"key": "nom",
											"value": "AmiR",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [],
								"body": {}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "text",
							"header": [
								{
									"name": "cache-control",
									"key": "cache-control",
									"value": "no-cache",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"name": "content-length",
									"key": "content-length",
									"value": "711",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"name": "content-type",
									"key": "content-type",
									"value": "application/json; charset=utf-8",
									"description": "The mime type of this content"
								},
								{
									"name": "date",
									"key": "date",
									"value": "Fri, 29 Sep 2017 20:38:37 GMT",
									"description": "The date and time that the message was sent"
								},
								{
									"name": "server",
									"key": "server",
									"value": "Development/2.0",
									"description": "A name for the server"
								}
							],
							"cookie": [],
							"responseTime": 1414,
							"body": "[{\"prenom\": \"Amir\", \"id\": 116, \"ville_actuelle\": \"Lansing\", \"nom_util\": \"amimir\", \"nom_famille\": \"Miranda\", \"courriel\": \"feugiat.tellus@dignissimMaecenasornare.edu\", \"sexe\": \"M\", \"ville_origine\": \"Oro Valley\", \"date_naissance\": \"1980-11-01\"}, {\"prenom\": \"Amir\", \"id\": 127, \"ville_actuelle\": \"Kenner\", \"nom_util\": \"amipar\", \"nom_famille\": \"Parsons\", \"courriel\": \"blandit.viverra.Donec@massaSuspendisse.org\", \"sexe\": \"M\", \"ville_origine\": \"Tuscaloosa\", \"date_naissance\": \"1964-10-23\"}, {\"prenom\": \"Amir\", \"id\": 177, \"ville_actuelle\": \"LaGrange\", \"nom_util\": \"amiwoo\", \"nom_famille\": \"Woods\", \"courriel\": \"non.egestas@facilisisvitaeorci.ca\", \"sexe\": \"M\", \"ville_origine\": \"Revere\", \"date_naissance\": \"1966-08-17\"}]"
						}
					]
				},
				{
					"name": "{{url_base}}/membres?ville-origine= doVER",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Content-Type est JSON et UTF-8\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json; charset=utf-8\";",
									"",
									"// Récupération des données reçues au format JSON.",
									"var tabMembresRecus = JSON.parse(responseBody);",
									"",
									"// Taille du tableau de données attendu dans la réponse JSON.",
									"var nbMembresAttendu = 4;",
									"tests[\"Nb de membres retournés\"] = tabMembresRecus.length === nbMembresAttendu;",
									"",
									"// Chargement du schéma de données JSON à partir de l'environnement.",
									"const jsonSchemaTabMembres = JSON.parse(environment.json_schema_tab_membres);",
									"// Validation selon le schéma de données JSON.",
									"tests[\"JSON respecte le schéma pour un tableau de membres\"] = tv4.validate(tabMembresRecus, jsonSchemaTabMembres);",
									"if (tv4.error !== null)",
									"    console.log(\"Message de validation schéma JSON (tableau de membres) : \", tv4.error);",
									"",
									"if (tabMembresRecus.length >= 1) {",
									"    tests[\"Pas de champs supplémentaires JSON\"] = Object.keys(tabMembresRecus[0]).length === Object.keys(jsonSchemaTabMembres.items.properties).length;",
									"}",
									"",
									"// Tests : Premier membre:",
									"if (tabMembresRecus.length >= 1) {",
									"    tests[\"Premier membre retourné est Astra Cox\"] = (tabMembresRecus[0].prenom === \"Astra\" && tabMembresRecus[0].nom_famille === \"Cox\");",
									"    tests[\"Premier membre : id\"] = tabMembresRecus[0].id === 226;",
									"    tests[\"Premier membre : courriel\"] = tabMembresRecus[0].courriel === \"Quisque.ornare@egestas.edu\";",
									"    tests[\"Premier membre : date_naissance\"] = tabMembresRecus[0].date_naissance === \"1968-09-08\";",
									"    tests[\"Premier membre : sexe\"] = tabMembresRecus[0].sexe === \"F\";",
									"    tests[\"Premier membre : nom_util\"] = tabMembresRecus[0].nom_util === \"astcox\";",
									"    tests[\"Premier membre : ville_actuelle\"] = tabMembresRecus[0].ville_actuelle === \"West Valley City\";",
									"    tests[\"Premier membre : ville_origine\"] = tabMembresRecus[0].ville_origine === \"Dover\";",
									"}",
									"",
									"// Tests : Dernier membre:",
									"if (tabMembresRecus.length >= nbMembresAttendu) {",
									"    tests[\"Dernier membre retourné est Joy Webb\"] = (tabMembresRecus[nbMembresAttendu-1].prenom === \"Joy\" && tabMembresRecus[nbMembresAttendu-1].nom_famille === \"Webb\");",
									"    tests[\"Dernier membre : id\"] = tabMembresRecus[nbMembresAttendu-1].id === 364;",
									"    tests[\"Dernier membre : courriel\"] = tabMembresRecus[nbMembresAttendu-1].courriel === \"mattis@cursus.ca\";",
									"    tests[\"Dernier membre : date_naissance\"] = tabMembresRecus[nbMembresAttendu-1].date_naissance === \"1976-04-28\";",
									"    tests[\"Dernier membre : sexe\"] = tabMembresRecus[nbMembresAttendu-1].sexe === \"F\";",
									"    tests[\"Dernier membre : nom_util\"] = tabMembresRecus[nbMembresAttendu-1].nom_util === \"joyweb\";",
									"    tests[\"Dernier membre : ville_actuelle\"] = tabMembresRecus[nbMembresAttendu-1].ville_actuelle === \"Maywood\";",
									"    tests[\"Dernier membre : ville_origine\"] = tabMembresRecus[nbMembresAttendu-1].ville_origine === \"Dover\";",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"url": {
							"raw": "{{url_base}}/membres?ville-origine= doVER",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"membres"
							],
							"query": [
								{
									"key": "ville-origine",
									"value": " doVER",
									"equals": true,
									"description": ""
								}
							],
							"variable": []
						},
						"method": "GET",
						"header": [],
						"body": {},
						"description": "Recherche de membres ayant \"Dover\" comme ville d'origine.\nVérification du retrait des espaces superflus et de l'ensensibilité à la casse."
					},
					"response": [
						{
							"id": "2bb374bf-906d-4fb7-8401-1afaf9b1886d",
							"name": "4 membres ont Dover comme vile d'origine",
							"originalRequest": {
								"url": {
									"raw": "{{url_base}}/membres?ville-origine= doVER",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"membres"
									],
									"query": [
										{
											"key": "ville-origine",
											"value": " doVER",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [],
								"body": {}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "text",
							"header": [
								{
									"name": "cache-control",
									"key": "cache-control",
									"value": "no-cache",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"name": "content-length",
									"key": "content-length",
									"value": "881",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"name": "content-type",
									"key": "content-type",
									"value": "application/json; charset=utf-8",
									"description": "The mime type of this content"
								},
								{
									"name": "date",
									"key": "date",
									"value": "Tue, 03 Oct 2017 15:21:17 GMT",
									"description": "The date and time that the message was sent"
								},
								{
									"name": "server",
									"key": "server",
									"value": "Development/2.0",
									"description": "A name for the server"
								}
							],
							"cookie": [],
							"responseTime": 1830,
							"body": "[{\"sexe\": \"F\", \"nom_famille\": \"Cox\", \"ville_origine\": \"Dover\", \"id\": 226, \"courriel\": \"Quisque.ornare@egestas.edu\", \"ville_actuelle\": \"West Valley City\", \"prenom\": \"Astra\", \"date_naissance\": \"1968-09-08\", \"nom_util\": \"astcox\"}, {\"sexe\": \"M\", \"nom_famille\": \"Mcleod\", \"ville_origine\": \"Dover\", \"id\": 114, \"courriel\": \"a.felis.ullamcorper@Integerinmagna.com\", \"ville_actuelle\": \"Bethany\", \"prenom\": \"Ashton\", \"date_naissance\": \"1972-05-12\", \"nom_util\": \"ashmcl\"}, {\"sexe\": \"M\", \"nom_famille\": \"Vang\", \"ville_origine\": \"Dover\", \"id\": 165, \"courriel\": \"semper@sodales.org\", \"ville_actuelle\": \"Staunton\", \"prenom\": \"Hashim\", \"date_naissance\": \"1985-01-05\", \"nom_util\": \"hasvan\"}, {\"sexe\": \"F\", \"nom_famille\": \"Webb\", \"ville_origine\": \"Dover\", \"id\": 364, \"courriel\": \"mattis@cursus.ca\", \"ville_actuelle\": \"Maywood\", \"prenom\": \"Joy\", \"date_naissance\": \"1976-04-28\", \"nom_util\": \"joyweb\"}]"
						}
					]
				},
				{
					"name": "{{url_base}}/membres?ville-actuelle=  Garden Grove",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Content-Type est JSON et UTF-8\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json; charset=utf-8\";",
									"",
									"// Récupération des données reçues au format JSON.",
									"var tabMembresRecus = JSON.parse(responseBody);",
									"",
									"// Taille du tableau de données attendu dans la réponse JSON.",
									"var nbMembresAttendu = 4;",
									"tests[\"Nb de membres retournés\"] = tabMembresRecus.length === nbMembresAttendu;",
									"",
									"// Chargement du schéma de données JSON à partir de l'environnement.",
									"const jsonSchemaTabMembres = JSON.parse(environment.json_schema_tab_membres);",
									"// Validation selon le schéma de données JSON.",
									"tests[\"JSON respecte le schéma pour un tableau de membres\"] = tv4.validate(tabMembresRecus, jsonSchemaTabMembres);",
									"if (tv4.error !== null)",
									"    console.log(\"Message de validation schéma JSON (tableau de membres) : \", tv4.error);",
									"",
									"if (tabMembresRecus.length >= 1) {",
									"    tests[\"Pas de champs supplémentaires JSON\"] = Object.keys(tabMembresRecus[0]).length === Object.keys(jsonSchemaTabMembres.items.properties).length;",
									"}",
									"",
									"// Tests : Premier membre:",
									"if (tabMembresRecus.length >= 1) {",
									"    tests[\"Premier membre retourné est Wyatt Barr\"] = (tabMembresRecus[0].prenom === \"Wyatt\" && tabMembresRecus[0].nom_famille === \"Barr\");",
									"    tests[\"Premier membre : id\"] = tabMembresRecus[0].id === 152;",
									"    tests[\"Premier membre : courriel\"] = tabMembresRecus[0].courriel === \"est.ac.facilisis@tempusmauris.com\";",
									"    tests[\"Premier membre : date_naissance\"] = tabMembresRecus[0].date_naissance === \"1975-02-05\";",
									"    tests[\"Premier membre : sexe\"] = tabMembresRecus[0].sexe === \"M\";",
									"    tests[\"Premier membre : nom_util\"] = tabMembresRecus[0].nom_util === \"wyabar\";",
									"    tests[\"Premier membre : ville_actuelle\"] = tabMembresRecus[0].ville_actuelle === \"Garden Grove\";",
									"    tests[\"Premier membre : ville_origine\"] = tabMembresRecus[0].ville_origine === \"Manhattan Beach\";",
									"}",
									"",
									"// Tests : Dernier membre:",
									"if (tabMembresRecus.length >= nbMembresAttendu) {",
									"    tests[\"Dernier membre retourné est Evan Ramos\"] = (tabMembresRecus[nbMembresAttendu-1].prenom === \"Evan\" && tabMembresRecus[nbMembresAttendu-1].nom_famille === \"Ramos\");",
									"    tests[\"Dernier membre : id\"] = tabMembresRecus[nbMembresAttendu-1].id === 198;",
									"    tests[\"Dernier membre : courriel\"] = tabMembresRecus[nbMembresAttendu-1].courriel === \"Donec@parturient.ca\";",
									"    tests[\"Dernier membre : date_naissance\"] = tabMembresRecus[nbMembresAttendu-1].date_naissance === \"1956-05-09\";",
									"    tests[\"Dernier membre : sexe\"] = tabMembresRecus[nbMembresAttendu-1].sexe === \"M\";",
									"    tests[\"Dernier membre : nom_util\"] = tabMembresRecus[nbMembresAttendu-1].nom_util === \"evaram\";",
									"    tests[\"Dernier membre : ville_actuelle\"] = tabMembresRecus[nbMembresAttendu-1].ville_actuelle === \"Garden Grove\";",
									"    tests[\"Dernier membre : ville_origine\"] = tabMembresRecus[nbMembresAttendu-1].ville_origine === \"Vallejo\";",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"url": {
							"raw": "{{url_base}}/membres?ville-actuelle=  Garden Grove",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"membres"
							],
							"query": [
								{
									"key": "ville-actuelle",
									"value": "  Garden Grove",
									"equals": true,
									"description": ""
								}
							],
							"variable": []
						},
						"method": "GET",
						"header": [],
						"body": {},
						"description": "Recherche de membres ayant \"Garden Grove\" comme ville actuelle.\nVérification du retrait des espaces superflus et de l'ensensibilité à la casse."
					},
					"response": [
						{
							"id": "e3522876-23c4-4a7e-8167-2008f315358a",
							"name": "4 membres ont Garden Grove comme ville actuelle",
							"originalRequest": {
								"url": {
									"raw": "{{url_base}}/membres?ville-actuelle=  Garden Grove",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"membres"
									],
									"query": [
										{
											"key": "ville-actuelle",
											"value": "  Garden Grove",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [],
								"body": {}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "text",
							"header": [
								{
									"name": "cache-control",
									"key": "cache-control",
									"value": "no-cache",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"name": "content-length",
									"key": "content-length",
									"value": "922",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"name": "content-type",
									"key": "content-type",
									"value": "application/json; charset=utf-8",
									"description": "The mime type of this content"
								},
								{
									"name": "date",
									"key": "date",
									"value": "Tue, 03 Oct 2017 15:27:12 GMT",
									"description": "The date and time that the message was sent"
								},
								{
									"name": "server",
									"key": "server",
									"value": "Development/2.0",
									"description": "A name for the server"
								}
							],
							"cookie": [],
							"responseTime": 1465,
							"body": "[{\"sexe\": \"M\", \"nom_famille\": \"Barr\", \"ville_origine\": \"Manhattan Beach\", \"id\": 152, \"courriel\": \"est.ac.facilisis@tempusmauris.com\", \"ville_actuelle\": \"Garden Grove\", \"prenom\": \"Wyatt\", \"date_naissance\": \"1975-02-05\", \"nom_util\": \"wyabar\"}, {\"sexe\": \"M\", \"nom_famille\": \"Ferrell\", \"ville_origine\": \"Laguna Hills\", \"id\": 51, \"courriel\": \"magnis.dis@Duiscursus.ca\", \"ville_actuelle\": \"Garden Grove\", \"prenom\": \"Baker\", \"date_naissance\": \"1963-05-29\", \"nom_util\": \"bakfer\"}, {\"sexe\": \"M\", \"nom_famille\": \"Grant\", \"ville_origine\": \"Claremont\", \"id\": 124, \"courriel\": \"aliquet.odio@ipsumdolorsit.edu\", \"ville_actuelle\": \"Garden Grove\", \"prenom\": \"Guy\", \"date_naissance\": \"1974-12-28\", \"nom_util\": \"guygra\"}, {\"sexe\": \"M\", \"nom_famille\": \"Ramos\", \"ville_origine\": \"Vallejo\", \"id\": 198, \"courriel\": \"Donec@parturient.ca\", \"ville_actuelle\": \"Garden Grove\", \"prenom\": \"Evan\", \"date_naissance\": \"1956-05-09\", \"nom_util\": \"evaram\"}]"
						}
					]
				},
				{
					"name": "{{url_base}}/membres?sexe= m",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Content-Type est JSON et UTF-8\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json; charset=utf-8\"; ",
									"",
									"// Récupération des données reçues au format JSON.",
									"var tabMembresRecus = JSON.parse(responseBody);",
									"",
									"// Taille du tableau de données attendu dans la réponse JSON.",
									"var nbMembresAttendu = 20;",
									"tests[\"Nb de membres retournés\"] = tabMembresRecus.length === nbMembresAttendu;",
									"",
									"// Chargement du schéma de données JSON à partir de l'environnement.",
									"const jsonSchemaTabMembres = JSON.parse(environment.json_schema_tab_membres);",
									"// Validation selon le schéma de données JSON.",
									"tests[\"JSON respecte le schéma pour un tableau de membres\"] = tv4.validate(tabMembresRecus, jsonSchemaTabMembres);",
									"if (tv4.error !== null)",
									"    console.log(\"Message de validation schéma JSON (tableau de membres) : \", tv4.error);",
									"",
									"if (tabMembresRecus.length >= 1) {",
									"    tests[\"Pas de champs supplémentaires JSON\"] = Object.keys(tabMembresRecus[0]).length === Object.keys(jsonSchemaTabMembres.items.properties).length;",
									"}",
									"",
									"// Tests : Premier membre:",
									"if (tabMembresRecus.length >= 1) {",
									"    tests[\"Premier membre retourné est Vincent Aguirre\"] = (tabMembresRecus[0].prenom === \"Vincent\" && tabMembresRecus[0].nom_famille === \"Aguirre\");",
									"    tests[\"Premier membre : id\"] = tabMembresRecus[0].id === 158;",
									"    tests[\"Premier membre : courriel\"] = tabMembresRecus[0].courriel === \"mauris.erat@quistristique.edu\";",
									"    tests[\"Premier membre : date_naissance\"] = tabMembresRecus[0].date_naissance === \"1988-02-18\";",
									"    tests[\"Premier membre : sexe\"] = tabMembresRecus[0].sexe === \"M\";",
									"    tests[\"Premier membre : nom_util\"] = tabMembresRecus[0].nom_util === \"vinagu\";",
									"    tests[\"Premier membre : ville_actuelle\"] = tabMembresRecus[0].ville_actuelle === \"Norwich\";",
									"    tests[\"Premier membre : ville_origine\"] = tabMembresRecus[0].ville_origine === \"Manhattan Beach\";",
									"}",
									"",
									"// Tests : Dernier membre:",
									"if (tabMembresRecus.length >= nbMembresAttendu) {",
									"    tests[\"Dernier membre retourné est Kadeem Bryant\"] = (tabMembresRecus[nbMembresAttendu-1].prenom === \"Kadeem\" && tabMembresRecus[nbMembresAttendu-1].nom_famille === \"Bryant\");",
									"    tests[\"Dernier membre : id\"] = tabMembresRecus[nbMembresAttendu-1].id === 193;",
									"    tests[\"Dernier membre : courriel\"] = tabMembresRecus[nbMembresAttendu-1].courriel === \"velit@Mauris.org\";",
									"    tests[\"Dernier membre : date_naissance\"] = tabMembresRecus[nbMembresAttendu-1].date_naissance === \"1977-05-01\";",
									"    tests[\"Dernier membre : sexe\"] = tabMembresRecus[nbMembresAttendu-1].sexe === \"M\";",
									"    tests[\"Dernier membre : nom_util\"] = tabMembresRecus[nbMembresAttendu-1].nom_util === \"kadbry\";",
									"    tests[\"Dernier membre : ville_actuelle\"] = tabMembresRecus[nbMembresAttendu-1].ville_actuelle === \"Billings\";",
									"    tests[\"Dernier membre : ville_origine\"] = tabMembresRecus[nbMembresAttendu-1].ville_origine === \"Greenville\";",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"url": {
							"raw": "{{url_base}}/membres?sexe= m",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"membres"
							],
							"query": [
								{
									"key": "sexe",
									"value": " m",
									"equals": true,
									"description": ""
								}
							],
							"variable": []
						},
						"method": "GET",
						"header": [],
						"body": {},
						"description": "Recherche de membres dont le sexe est masculin.\nVérification du retrait des espaces superflus et de l'ensensibilité à la casse."
					},
					"response": [
						{
							"id": "c84537e2-86fc-460c-9f32-e132f49bdd4a",
							"name": "20 premiers membre dont le sexe est masculin",
							"originalRequest": {
								"url": {
									"raw": "{{url_base}}/membres?sexe= m",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"membres"
									],
									"query": [
										{
											"key": "sexe",
											"value": " m",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [],
								"body": {}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "text",
							"header": [
								{
									"name": "cache-control",
									"key": "cache-control",
									"value": "no-cache",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"name": "content-length",
									"key": "content-length",
									"value": "4602",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"name": "content-type",
									"key": "content-type",
									"value": "application/json; charset=utf-8",
									"description": "The mime type of this content"
								},
								{
									"name": "date",
									"key": "date",
									"value": "Tue, 03 Oct 2017 15:46:47 GMT",
									"description": "The date and time that the message was sent"
								},
								{
									"name": "server",
									"key": "server",
									"value": "Development/2.0",
									"description": "A name for the server"
								}
							],
							"cookie": [],
							"responseTime": 2359,
							"body": "[{\"courriel\": \"mauris.erat@quistristique.edu\", \"nom_util\": \"vinagu\", \"ville_actuelle\": \"Norwich\", \"date_naissance\": \"1988-02-18\", \"sexe\": \"M\", \"id\": 158, \"nom_famille\": \"Aguirre\", \"ville_origine\": \"Manhattan Beach\", \"prenom\": \"Vincent\"}, {\"courriel\": \"netus.et@euenim.org\", \"nom_util\": \"yosalf\", \"ville_actuelle\": \"Diamond Bar\", \"date_naissance\": \"1974-08-08\", \"sexe\": \"M\", \"id\": 194, \"nom_famille\": \"Alford\", \"ville_origine\": \"Lockport\", \"prenom\": \"Yoshio\"}, {\"courriel\": \"pretium.aliquet@sit.edu\", \"nom_util\": \"noaarn\", \"ville_actuelle\": \"Hartford\", \"date_naissance\": \"1980-01-19\", \"sexe\": \"M\", \"id\": 200, \"nom_famille\": \"Arnold\", \"ville_origine\": \"Yazoo City\", \"prenom\": \"Noah\"}, {\"courriel\": \"mattis.ornare@augueacipsum.org\", \"nom_util\": \"hamatk\", \"ville_actuelle\": \"Wichita\", \"date_naissance\": \"1983-02-08\", \"sexe\": \"M\", \"id\": 175, \"nom_famille\": \"Atkinson\", \"ville_origine\": \"Corona\", \"prenom\": \"Hammett\"}, {\"courriel\": \"dolor.Quisque.tincidunt@luctus.com\", \"nom_util\": \"levavi\", \"ville_actuelle\": \"Grass Valley\", \"date_naissance\": \"1981-12-08\", \"sexe\": \"M\", \"id\": 22, \"nom_famille\": \"Avila\", \"ville_origine\": \"Miami Gardens\", \"prenom\": \"Levi\"}, {\"courriel\": \"est.ac.facilisis@tempusmauris.com\", \"nom_util\": \"wyabar\", \"ville_actuelle\": \"Garden Grove\", \"date_naissance\": \"1975-02-05\", \"sexe\": \"M\", \"id\": 152, \"nom_famille\": \"Barr\", \"ville_origine\": \"Manhattan Beach\", \"prenom\": \"Wyatt\"}, {\"courriel\": \"semper.auctor.Mauris@mattisCras.ca\", \"nom_util\": \"borbar\", \"ville_actuelle\": \"Oxford\", \"date_naissance\": \"1984-02-26\", \"sexe\": \"M\", \"id\": 7, \"nom_famille\": \"Barrera\", \"ville_origine\": \"Denver\", \"prenom\": \"Boris\"}, {\"courriel\": \"ut@diamlorem.com\", \"nom_util\": \"zacbar\", \"ville_actuelle\": \"Brownsville\", \"date_naissance\": \"1950-10-18\", \"sexe\": \"M\", \"id\": 162, \"nom_famille\": \"Barrett\", \"ville_origine\": \"Lynchburg\", \"prenom\": \"Zachary\"}, {\"courriel\": \"Fusce.dolor@eumetus.edu\", \"nom_util\": \"jerbar\", \"ville_actuelle\": \"Lancaster\", \"date_naissance\": \"1966-03-14\", \"sexe\": \"M\", \"id\": 138, \"nom_famille\": \"Barton\", \"ville_origine\": \"Norwich\", \"prenom\": \"Jeremy\"}, {\"courriel\": \"mauris.Integer@estMauris.edu\", \"nom_util\": \"oscbas\", \"ville_actuelle\": \"Rialto\", \"date_naissance\": \"1965-10-17\", \"sexe\": \"M\", \"id\": 141, \"nom_famille\": \"Bass\", \"ville_origine\": \"Highland Park\", \"prenom\": \"Oscar\"}, {\"courriel\": \"aptent@morbitristiquesenectus.edu\", \"nom_util\": \"breben\", \"ville_actuelle\": \"Guayama\", \"date_naissance\": \"1964-08-28\", \"sexe\": \"M\", \"id\": 60, \"nom_famille\": \"Benson\", \"ville_origine\": \"Apple Valley\", \"prenom\": \"Brent\"}, {\"courriel\": \"magna.a@Morbisit.edu\", \"nom_util\": \"fitbes\", \"ville_actuelle\": \"Vermillion\", \"date_naissance\": \"1972-02-11\", \"sexe\": \"M\", \"id\": 164, \"nom_famille\": \"Best\", \"ville_origine\": \"Hartford\", \"prenom\": \"Fitzgerald\"}, {\"courriel\": \"Proin.vel.nisl@pellentesque.com\", \"nom_util\": \"rigbes\", \"ville_actuelle\": \"La Mirada\", \"date_naissance\": \"1992-05-27\", \"sexe\": \"M\", \"id\": 118, \"nom_famille\": \"Best\", \"ville_origine\": \"South Portland\", \"prenom\": \"Rigel\"}, {\"courriel\": \"et.netus.et@nibhPhasellusnulla.edu\", \"nom_util\": \"leobla\", \"ville_actuelle\": \"Quincy\", \"date_naissance\": \"1987-04-20\", \"sexe\": \"M\", \"id\": 174, \"nom_famille\": \"Blair\", \"ville_origine\": \"Hollister\", \"prenom\": \"Leonard\"}, {\"courriel\": \"pede.nonummy.ut@massaIntegervitae.org\", \"nom_util\": \"keeboo\", \"ville_actuelle\": \"Grafton\", \"date_naissance\": \"1955-10-28\", \"sexe\": \"M\", \"id\": 157, \"nom_famille\": \"Booker\", \"ville_origine\": \"Newport News\", \"prenom\": \"Keefe\"}, {\"courriel\": \"pellentesque.tellus.sem@enim.com\", \"nom_util\": \"eriboy\", \"ville_actuelle\": \"Hartland\", \"date_naissance\": \"1984-11-27\", \"sexe\": \"M\", \"id\": 155, \"nom_famille\": \"Boyd\", \"ville_origine\": \"Leominster\", \"prenom\": \"Erich\"}, {\"courriel\": \"eget.dictum.placerat@Inornare.edu\", \"nom_util\": \"gabbra\", \"ville_actuelle\": \"Tuscaloosa\", \"date_naissance\": \"1984-05-07\", \"sexe\": \"M\", \"id\": 58, \"nom_famille\": \"Branch\", \"ville_origine\": \"Saint Albans\", \"prenom\": \"Gabriel\"}, {\"courriel\": \"lorem.sit.amet@venenatisvelfaucibus.ca\", \"nom_util\": \"haybri\", \"ville_actuelle\": \"Parkersburg\", \"date_naissance\": \"1979-02-16\", \"sexe\": \"M\", \"id\": 31, \"nom_famille\": \"Bright\", \"ville_origine\": \"Quincy\", \"prenom\": \"Hayden\"}, {\"courriel\": \"arcu.eu@neque.org\", \"nom_util\": \"yasbru\", \"ville_actuelle\": \"Kalamazoo\", \"date_naissance\": \"1980-02-23\", \"sexe\": \"M\", \"id\": 170, \"nom_famille\": \"Bruce\", \"ville_origine\": \"Springdale\", \"prenom\": \"Yasir\"}, {\"courriel\": \"velit@Mauris.org\", \"nom_util\": \"kadbry\", \"ville_actuelle\": \"Billings\", \"date_naissance\": \"1977-05-01\", \"sexe\": \"M\", \"id\": 193, \"nom_famille\": \"Bryant\", \"ville_origine\": \"Greenville\", \"prenom\": \"Kadeem\"}]"
						}
					]
				},
				{
					"name": "{{url_base}}/membres?sexe=M&sexe=F",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Content-Type est JSON et UTF-8\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json; charset=utf-8\";",
									"",
									"// Récupération des données reçues au format JSON.",
									"var tabMembresRecus = JSON.parse(responseBody);",
									"",
									"// Taille du tableau de données attendu dans la réponse JSON.",
									"var nbMembresAttendu = 20;",
									"tests[\"Nb de membres retournés\"] = tabMembresRecus.length === nbMembresAttendu;",
									"",
									"// Chargement du schéma de données JSON à partir de l'environnement.",
									"const jsonSchemaTabMembres = JSON.parse(environment.json_schema_tab_membres);",
									"// Validation selon le schéma de données JSON.",
									"tests[\"JSON respecte le schéma pour un tableau de membres\"] = tv4.validate(tabMembresRecus, jsonSchemaTabMembres);",
									"if (tv4.error !== null)",
									"    console.log(\"Message de validation schéma JSON (tableau de membres) : \", tv4.error);",
									"",
									"if (tabMembresRecus.length >= 1) {",
									"    tests[\"Pas de champs supplémentaires JSON\"] = Object.keys(tabMembresRecus[0]).length === Object.keys(jsonSchemaTabMembres.items.properties).length;",
									"}",
									"",
									"// Tests : Premier membre:",
									"if (tabMembresRecus.length >= 1) {",
									"    tests[\"Premier membre retourné est Ursa Abbott\"] = (tabMembresRecus[0].prenom === \"Ursa\" && tabMembresRecus[0].nom_famille === \"Abbott\");",
									"    tests[\"Premier membre : id\"] = tabMembresRecus[0].id === 295;",
									"    tests[\"Premier membre : courriel\"] = tabMembresRecus[0].courriel === \"et@Etiam.com\";",
									"    tests[\"Premier membre : date_naissance\"] = tabMembresRecus[0].date_naissance === \"1969-10-15\";",
									"    tests[\"Premier membre : sexe\"] = tabMembresRecus[0].sexe === \"F\";",
									"    tests[\"Premier membre : nom_util\"] = tabMembresRecus[0].nom_util === \"ursabb\";",
									"    tests[\"Premier membre : ville_actuelle\"] = tabMembresRecus[0].ville_actuelle === \"Longview\";",
									"    tests[\"Premier membre : ville_origine\"] = tabMembresRecus[0].ville_origine === \"Duluth\";",
									"}",
									"",
									"// Tests : Dernier membre:",
									"if (tabMembresRecus.length >= nbMembresAttendu) {",
									"    tests[\"Dernier membre retourné est Oscar Bass\"] = (tabMembresRecus[nbMembresAttendu-1].prenom === \"Oscar\" && tabMembresRecus[nbMembresAttendu-1].nom_famille === \"Bass\");",
									"    tests[\"Dernier membre : id\"] = tabMembresRecus[nbMembresAttendu-1].id === 141;",
									"    tests[\"Dernier membre : courriel\"] = tabMembresRecus[nbMembresAttendu-1].courriel === \"mauris.Integer@estMauris.edu\";",
									"    tests[\"Dernier membre : date_naissance\"] = tabMembresRecus[nbMembresAttendu-1].date_naissance === \"1965-10-17\";",
									"    tests[\"Dernier membre : sexe\"] = tabMembresRecus[nbMembresAttendu-1].sexe === \"M\";",
									"    tests[\"Dernier membre : nom_util\"] = tabMembresRecus[nbMembresAttendu-1].nom_util === \"oscbas\";",
									"    tests[\"Dernier membre : ville_actuelle\"] = tabMembresRecus[nbMembresAttendu-1].ville_actuelle === \"Rialto\";",
									"    tests[\"Dernier membre : ville_origine\"] = tabMembresRecus[nbMembresAttendu-1].ville_origine === \"Highland Park\";",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"url": {
							"raw": "{{url_base}}/membres?sexe=M&sexe=F",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"membres"
							],
							"query": [
								{
									"key": "sexe",
									"value": "M",
									"equals": true,
									"description": ""
								},
								{
									"key": "sexe",
									"value": "F",
									"equals": true,
									"description": ""
								}
							],
							"variable": []
						},
						"method": "GET",
						"header": [],
						"body": {},
						"description": "Le sexe est ignoré si les deux valeurs possibles (M et F) sont présentes."
					},
					"response": [
						{
							"id": "0da2cafd-db52-4e82-9e88-7d843e91e0a1",
							"name": "Les 20 premiers membres en ordre de nom de famille et puis de prénom.",
							"originalRequest": {
								"url": {
									"raw": "{{url_base}}/membres?sexe=M&sexe=F",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"membres"
									],
									"query": [
										{
											"key": "sexe",
											"value": "M",
											"equals": true,
											"description": ""
										},
										{
											"key": "sexe",
											"value": "F",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [],
								"body": {}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "text",
							"header": [
								{
									"name": "cache-control",
									"key": "cache-control",
									"value": "no-cache",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"name": "content-length",
									"key": "content-length",
									"value": "4545",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"name": "content-type",
									"key": "content-type",
									"value": "application/json; charset=utf-8",
									"description": "The mime type of this content"
								},
								{
									"name": "date",
									"key": "date",
									"value": "Tue, 03 Oct 2017 15:54:36 GMT",
									"description": "The date and time that the message was sent"
								},
								{
									"name": "server",
									"key": "server",
									"value": "Development/2.0",
									"description": "A name for the server"
								}
							],
							"cookie": [],
							"responseTime": 2904,
							"body": "[{\"courriel\": \"et@Etiam.com\", \"nom_util\": \"ursabb\", \"ville_actuelle\": \"Longview\", \"date_naissance\": \"1969-10-15\", \"sexe\": \"F\", \"id\": 295, \"nom_famille\": \"Abbott\", \"ville_origine\": \"Duluth\", \"prenom\": \"Ursa\"}, {\"courriel\": \"risus.quis.diam@leoVivamusnibh.com\", \"nom_util\": \"amyadk\", \"ville_actuelle\": \"Indianapolis\", \"date_naissance\": \"1985-12-27\", \"sexe\": \"F\", \"id\": 278, \"nom_famille\": \"Adkins\", \"ville_origine\": \"East St. Louis\", \"prenom\": \"Amy\"}, {\"courriel\": \"parturient.montes@egestas.org\", \"nom_util\": \"halagu\", \"ville_actuelle\": \"Ponce\", \"date_naissance\": \"1965-06-08\", \"sexe\": \"F\", \"id\": 289, \"nom_famille\": \"Aguirre\", \"ville_origine\": \"Olean\", \"prenom\": \"Halee\"}, {\"courriel\": \"mauris.erat@quistristique.edu\", \"nom_util\": \"vinagu\", \"ville_actuelle\": \"Norwich\", \"date_naissance\": \"1988-02-18\", \"sexe\": \"M\", \"id\": 158, \"nom_famille\": \"Aguirre\", \"ville_origine\": \"Manhattan Beach\", \"prenom\": \"Vincent\"}, {\"courriel\": \"netus.et@euenim.org\", \"nom_util\": \"yosalf\", \"ville_actuelle\": \"Diamond Bar\", \"date_naissance\": \"1974-08-08\", \"sexe\": \"M\", \"id\": 194, \"nom_famille\": \"Alford\", \"ville_origine\": \"Lockport\", \"prenom\": \"Yoshio\"}, {\"courriel\": \"nonummy@Nunc.com\", \"nom_util\": \"camals\", \"ville_actuelle\": \"Wilmington\", \"date_naissance\": \"1972-02-25\", \"sexe\": \"F\", \"id\": 281, \"nom_famille\": \"Alston\", \"ville_origine\": \"Corinth\", \"prenom\": \"Cameran\"}, {\"courriel\": \"pretium.aliquet@sit.edu\", \"nom_util\": \"noaarn\", \"ville_actuelle\": \"Hartford\", \"date_naissance\": \"1980-01-19\", \"sexe\": \"M\", \"id\": 200, \"nom_famille\": \"Arnold\", \"ville_origine\": \"Yazoo City\", \"prenom\": \"Noah\"}, {\"courriel\": \"malesuada@nonummyutmolestie.edu\", \"nom_util\": \"pamash\", \"ville_actuelle\": \"Rosemead\", \"date_naissance\": \"1985-10-06\", \"sexe\": \"F\", \"id\": 292, \"nom_famille\": \"Ashley\", \"ville_origine\": \"Woodward\", \"prenom\": \"Pamela\"}, {\"courriel\": \"mattis.ornare@augueacipsum.org\", \"nom_util\": \"hamatk\", \"ville_actuelle\": \"Wichita\", \"date_naissance\": \"1983-02-08\", \"sexe\": \"M\", \"id\": 175, \"nom_famille\": \"Atkinson\", \"ville_origine\": \"Corona\", \"prenom\": \"Hammett\"}, {\"courriel\": \"dolor.Quisque.tincidunt@luctus.com\", \"nom_util\": \"levavi\", \"ville_actuelle\": \"Grass Valley\", \"date_naissance\": \"1981-12-08\", \"sexe\": \"M\", \"id\": 22, \"nom_famille\": \"Avila\", \"ville_origine\": \"Miami Gardens\", \"prenom\": \"Levi\"}, {\"courriel\": \"Mauris.vestibulum.neque@enimnon.org\", \"nom_util\": \"janbai\", \"ville_actuelle\": \"Elko\", \"date_naissance\": \"1988-09-17\", \"sexe\": \"F\", \"id\": 209, \"nom_famille\": \"Bailey\", \"ville_origine\": \"Sanford\", \"prenom\": \"Jane\"}, {\"courriel\": \"malesuada.id@non.ca\", \"nom_util\": \"ivabak\", \"ville_actuelle\": \"Seattle\", \"date_naissance\": \"1982-05-02\", \"sexe\": \"F\", \"id\": 217, \"nom_famille\": \"Baker\", \"ville_origine\": \"Brookfield\", \"prenom\": \"Ivana\"}, {\"courriel\": \"Cras.lorem.lorem@lectus.org\", \"nom_util\": \"heabal\", \"ville_actuelle\": \"Perth Amboy\", \"date_naissance\": \"1954-01-02\", \"sexe\": \"F\", \"id\": 247, \"nom_famille\": \"Ballard\", \"ville_origine\": \"Basin\", \"prenom\": \"Heather\"}, {\"courriel\": \"sem@molestie.org\", \"nom_util\": \"ambbar\", \"ville_actuelle\": \"South Pasadena\", \"date_naissance\": \"1963-09-29\", \"sexe\": \"F\", \"id\": 286, \"nom_famille\": \"Barlow\", \"ville_origine\": \"Monrovia\", \"prenom\": \"Amber\"}, {\"courriel\": \"est.ac.facilisis@tempusmauris.com\", \"nom_util\": \"wyabar\", \"ville_actuelle\": \"Garden Grove\", \"date_naissance\": \"1975-02-05\", \"sexe\": \"M\", \"id\": 152, \"nom_famille\": \"Barr\", \"ville_origine\": \"Manhattan Beach\", \"prenom\": \"Wyatt\"}, {\"courriel\": \"semper.auctor.Mauris@mattisCras.ca\", \"nom_util\": \"borbar\", \"ville_actuelle\": \"Oxford\", \"date_naissance\": \"1984-02-26\", \"sexe\": \"M\", \"id\": 7, \"nom_famille\": \"Barrera\", \"ville_origine\": \"Denver\", \"prenom\": \"Boris\"}, {\"courriel\": \"ut@diamlorem.com\", \"nom_util\": \"zacbar\", \"ville_actuelle\": \"Brownsville\", \"date_naissance\": \"1950-10-18\", \"sexe\": \"M\", \"id\": 162, \"nom_famille\": \"Barrett\", \"ville_origine\": \"Lynchburg\", \"prenom\": \"Zachary\"}, {\"courriel\": \"Pellentesque.ut@ullamcorpernislarcu.org\", \"nom_util\": \"petbar\", \"ville_actuelle\": \"Houston\", \"date_naissance\": \"1958-11-04\", \"sexe\": \"F\", \"id\": 216, \"nom_famille\": \"Barron\", \"ville_origine\": \"Biloxi\", \"prenom\": \"Petra\"}, {\"courriel\": \"Fusce.dolor@eumetus.edu\", \"nom_util\": \"jerbar\", \"ville_actuelle\": \"Lancaster\", \"date_naissance\": \"1966-03-14\", \"sexe\": \"M\", \"id\": 138, \"nom_famille\": \"Barton\", \"ville_origine\": \"Norwich\", \"prenom\": \"Jeremy\"}, {\"courriel\": \"mauris.Integer@estMauris.edu\", \"nom_util\": \"oscbas\", \"ville_actuelle\": \"Rialto\", \"date_naissance\": \"1965-10-17\", \"sexe\": \"M\", \"id\": 141, \"nom_famille\": \"Bass\", \"ville_origine\": \"Highland Park\", \"prenom\": \"Oscar\"}]"
						}
					]
				},
				{
					"name": "{{url_base}}/membres?ville-origine=Hollywood&sexe=M",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Content-Type est JSON et UTF-8\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json; charset=utf-8\"; ",
									"",
									"// Récupération des données reçues au format JSON.",
									"var tabMembresRecus = JSON.parse(responseBody);",
									"",
									"// Taille du tableau de données attendu dans la réponse JSON.",
									"var nbMembresAttendu = 3;",
									"tests[\"Nb de membres retournés\"] = tabMembresRecus.length === nbMembresAttendu;",
									"",
									"// Chargement du schéma de données JSON à partir de l'environnement.",
									"const jsonSchemaTabMembres = JSON.parse(environment.json_schema_tab_membres);",
									"// Validation selon le schéma de données JSON.",
									"tests[\"JSON respecte le schéma pour un tableau de membres\"] = tv4.validate(tabMembresRecus, jsonSchemaTabMembres);",
									"if (tv4.error !== null)",
									"    console.log(\"Message de validation schéma JSON (tableau de membres) : \", tv4.error);",
									"",
									"if (tabMembresRecus.length >= 1) {",
									"    tests[\"Pas de champs supplémentaires JSON\"] = Object.keys(tabMembresRecus[0]).length === Object.keys(jsonSchemaTabMembres.items.properties).length;",
									"}",
									"",
									"// Tests : Premier membre:",
									"if (tabMembresRecus.length >= 1) {",
									"    tests[\"Premier membre retourné est Hunter Nixon\"] = (tabMembresRecus[0].prenom === \"Hunter\" && tabMembresRecus[0].nom_famille === \"Nixon\");",
									"    tests[\"Premier membre : id\"] = tabMembresRecus[0].id === 160;",
									"    tests[\"Premier membre : courriel\"] = tabMembresRecus[0].courriel === \"adipiscing@lacuspede.org\";",
									"    tests[\"Premier membre : date_naissance\"] = tabMembresRecus[0].date_naissance === \"1980-10-30\";",
									"    tests[\"Premier membre : sexe\"] = tabMembresRecus[0].sexe === \"M\";",
									"    tests[\"Premier membre : nom_util\"] = tabMembresRecus[0].nom_util === \"hunnix\";",
									"    tests[\"Premier membre : ville_actuelle\"] = tabMembresRecus[0].ville_actuelle === \"Urbana\";",
									"    tests[\"Premier membre : ville_origine\"] = tabMembresRecus[0].ville_origine === \"Hollywood\";",
									"}",
									"",
									"// Tests : Dernier membre:",
									"if (tabMembresRecus.length >= nbMembresAttendu) {",
									"    tests[\"Dernier membre retourné est Arden Sykes\"] = (tabMembresRecus[nbMembresAttendu-1].prenom === \"Arden\" && tabMembresRecus[nbMembresAttendu-1].nom_famille === \"Sykes\");",
									"    tests[\"Dernier membre : id\"] = tabMembresRecus[nbMembresAttendu-1].id === 132;",
									"    tests[\"Dernier membre : courriel\"] = tabMembresRecus[nbMembresAttendu-1].courriel === \"velit@sedturpisnec.ca\";",
									"    tests[\"Dernier membre : date_naissance\"] = tabMembresRecus[nbMembresAttendu-1].date_naissance === \"1964-05-31\";",
									"    tests[\"Dernier membre : sexe\"] = tabMembresRecus[nbMembresAttendu-1].sexe === \"M\";",
									"    tests[\"Dernier membre : nom_util\"] = tabMembresRecus[nbMembresAttendu-1].nom_util === \"ardsyk\";",
									"    tests[\"Dernier membre : ville_actuelle\"] = tabMembresRecus[nbMembresAttendu-1].ville_actuelle === \"Oneida\";",
									"    tests[\"Dernier membre : ville_origine\"] = tabMembresRecus[nbMembresAttendu-1].ville_origine === \"Hollywood\";",
									"}",
									"",
									""
								]
							}
						}
					],
					"request": {
						"url": {
							"raw": "{{url_base}}/membres?ville-origine=Hollywood&sexe=M",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"membres"
							],
							"query": [
								{
									"key": "ville-origine",
									"value": "Hollywood",
									"equals": true,
									"description": ""
								},
								{
									"key": "sexe",
									"value": "M",
									"equals": true,
									"description": ""
								}
							],
							"variable": []
						},
						"method": "GET",
						"header": [],
						"body": {},
						"description": "Recherche de membres avec la ville d'origine et le sexe."
					},
					"response": [
						{
							"id": "08326811-ae0b-4b6d-b13d-4f3c170806fb",
							"name": "3 membres ont Hollywood comme ville d'origine et sont de sexe masculin.",
							"originalRequest": {
								"url": {
									"raw": "{{url_base}}/membres?ville-origine=Hollywood&sexe=M",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"membres"
									],
									"query": [
										{
											"key": "ville-origine",
											"value": "Hollywood",
											"equals": true,
											"description": ""
										},
										{
											"key": "sexe",
											"value": "M",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [],
								"body": {}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "text",
							"header": [
								{
									"name": "cache-control",
									"key": "cache-control",
									"value": "no-cache",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"name": "content-length",
									"key": "content-length",
									"value": "670",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"name": "content-type",
									"key": "content-type",
									"value": "application/json; charset=utf-8",
									"description": "The mime type of this content"
								},
								{
									"name": "date",
									"key": "date",
									"value": "Tue, 03 Oct 2017 16:04:04 GMT",
									"description": "The date and time that the message was sent"
								},
								{
									"name": "server",
									"key": "server",
									"value": "Development/2.0",
									"description": "A name for the server"
								}
							],
							"cookie": [],
							"responseTime": 1122,
							"body": "[{\"nom_famille\": \"Nixon\", \"sexe\": \"M\", \"date_naissance\": \"1980-10-30\", \"id\": 160, \"courriel\": \"adipiscing@lacuspede.org\", \"prenom\": \"Hunter\", \"ville_origine\": \"Hollywood\", \"ville_actuelle\": \"Urbana\", \"nom_util\": \"hunnix\"}, {\"nom_famille\": \"Owens\", \"sexe\": \"M\", \"date_naissance\": \"1956-04-25\", \"id\": 115, \"courriel\": \"Cras@luctusetultrices.org\", \"prenom\": \"Christopher\", \"ville_origine\": \"Hollywood\", \"ville_actuelle\": \"Murrieta\", \"nom_util\": \"chrowe\"}, {\"nom_famille\": \"Sykes\", \"sexe\": \"M\", \"date_naissance\": \"1964-05-31\", \"id\": 132, \"courriel\": \"velit@sedturpisnec.ca\", \"prenom\": \"Arden\", \"ville_origine\": \"Hollywood\", \"ville_actuelle\": \"Oneida\", \"nom_util\": \"ardsyk\"}]"
						}
					]
				},
				{
					"name": "{{url_base}}/membres?ville-actuelle=South Pasadena&sexe=F",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Content-Type est JSON et UTF-8\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json; charset=utf-8\"; ",
									"",
									"// Récupération des données reçues au format JSON.",
									"var tabMembresRecus = JSON.parse(responseBody);",
									"",
									"// Taille du tableau de données attendu dans la réponse JSON.",
									"var nbMembresAttendu = 2;",
									"tests[\"Nb de membres retournés\"] = tabMembresRecus.length === nbMembresAttendu;",
									"",
									"// Chargement du schéma de données JSON à partir de l'environnement.",
									"const jsonSchemaTabMembres = JSON.parse(environment.json_schema_tab_membres);",
									"// Validation selon le schéma de données JSON.",
									"tests[\"JSON respecte le schéma pour un tableau de membres\"] = tv4.validate(tabMembresRecus, jsonSchemaTabMembres);",
									"if (tv4.error !== null)",
									"    console.log(\"Message de validation schéma JSON (tableau de membres) : \", tv4.error);",
									"",
									"if (tabMembresRecus.length >= 1) {",
									"    tests[\"Pas de champs supplémentaires JSON\"] = Object.keys(tabMembresRecus[0]).length === Object.keys(jsonSchemaTabMembres.items.properties).length;",
									"}",
									"",
									"// Tests : Premier membre:",
									"if (tabMembresRecus.length >= 1) {",
									"    tests[\"Premier membre retourné est Amber Barlow\"] = (tabMembresRecus[0].prenom === \"Amber\" && tabMembresRecus[0].nom_famille === \"Barlow\");",
									"    tests[\"Premier membre : id\"] = tabMembresRecus[0].id === 286;",
									"    tests[\"Premier membre : courriel\"] = tabMembresRecus[0].courriel === \"sem@molestie.org\";",
									"    tests[\"Premier membre : date_naissance\"] = tabMembresRecus[0].date_naissance === \"1963-09-29\";",
									"    tests[\"Premier membre : sexe\"] = tabMembresRecus[0].sexe === \"F\";",
									"    tests[\"Premier membre : nom_util\"] = tabMembresRecus[0].nom_util === \"ambbar\";",
									"    tests[\"Premier membre : ville_actuelle\"] = tabMembresRecus[0].ville_actuelle === \"South Pasadena\";",
									"    tests[\"Premier membre : ville_origine\"] = tabMembresRecus[0].ville_origine === \"Monrovia\";",
									"}",
									"",
									"// Tests : Dernier membre:",
									"if (tabMembresRecus.length >= nbMembresAttendu) {",
									"    tests[\"Dernier membre retourné est Fiona Michael\"] = (tabMembresRecus[nbMembresAttendu-1].prenom === \"Fiona\" && tabMembresRecus[nbMembresAttendu-1].nom_famille === \"Michael\");",
									"    tests[\"Dernier membre : id\"] = tabMembresRecus[nbMembresAttendu-1].id === 354;",
									"    tests[\"Dernier membre : courriel\"] = tabMembresRecus[nbMembresAttendu-1].courriel === \"a@loremacrisus.com\";",
									"    tests[\"Dernier membre : date_naissance\"] = tabMembresRecus[nbMembresAttendu-1].date_naissance === \"1986-09-09\";",
									"    tests[\"Dernier membre : sexe\"] = tabMembresRecus[nbMembresAttendu-1].sexe === \"F\";",
									"    tests[\"Dernier membre : nom_util\"] = tabMembresRecus[nbMembresAttendu-1].nom_util === \"fiomic\";",
									"    tests[\"Dernier membre : ville_actuelle\"] = tabMembresRecus[nbMembresAttendu-1].ville_actuelle === \"South Pasadena\";",
									"    tests[\"Dernier membre : ville_origine\"] = tabMembresRecus[nbMembresAttendu-1].ville_origine === \"San Mateo\";",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"url": {
							"raw": "{{url_base}}/membres?ville-actuelle=South Pasadena&sexe=F",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"membres"
							],
							"query": [
								{
									"key": "ville-actuelle",
									"value": "South Pasadena",
									"equals": true,
									"description": ""
								},
								{
									"key": "sexe",
									"value": "F",
									"equals": true,
									"description": ""
								}
							],
							"variable": []
						},
						"method": "GET",
						"header": [],
						"body": {},
						"description": "Recherche de membres avec la ville actuelle et le sexe."
					},
					"response": [
						{
							"id": "c82f191a-3b16-4501-ab85-1266cced5f8f",
							"name": "2 membres ont South Pasadena comme ville actuelle et sont de sexe féminin.",
							"originalRequest": {
								"url": {
									"raw": "{{url_base}}/membres?ville-actuelle=South Pasadena&sexe=F",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"membres"
									],
									"query": [
										{
											"key": "ville-actuelle",
											"value": "South Pasadena",
											"equals": true,
											"description": ""
										},
										{
											"key": "sexe",
											"value": "F",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [],
								"body": {}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "text",
							"header": [
								{
									"name": "cache-control",
									"key": "cache-control",
									"value": "no-cache",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"name": "content-length",
									"key": "content-length",
									"value": "446",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"name": "content-type",
									"key": "content-type",
									"value": "application/json; charset=utf-8",
									"description": "The mime type of this content"
								},
								{
									"name": "date",
									"key": "date",
									"value": "Tue, 03 Oct 2017 16:00:09 GMT",
									"description": "The date and time that the message was sent"
								},
								{
									"name": "server",
									"key": "server",
									"value": "Development/2.0",
									"description": "A name for the server"
								}
							],
							"cookie": [],
							"responseTime": 1286,
							"body": "[{\"ville_origine\": \"Monrovia\", \"date_naissance\": \"1963-09-29\", \"nom_famille\": \"Barlow\", \"prenom\": \"Amber\", \"courriel\": \"sem@molestie.org\", \"sexe\": \"F\", \"id\": 286, \"ville_actuelle\": \"South Pasadena\", \"nom_util\": \"ambbar\"}, {\"ville_origine\": \"San Mateo\", \"date_naissance\": \"1986-09-09\", \"nom_famille\": \"Michael\", \"prenom\": \"Fiona\", \"courriel\": \"a@loremacrisus.com\", \"sexe\": \"F\", \"id\": 354, \"ville_actuelle\": \"South Pasadena\", \"nom_util\": \"fiomic\"}]"
						}
					]
				},
				{
					"name": "{{url_base}}/membres?nom=Amir&sexe=F",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Content-Type est JSON et UTF-8\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json; charset=utf-8\"; ",
									"",
									"// Récupération des données reçues au format JSON.",
									"var tabMembresRecus = JSON.parse(responseBody);",
									"",
									"// Taille du tableau de données attendu dans la réponse JSON.",
									"var nbMembresAttendu = 0;",
									"tests[\"Nb de membres retournés\"] = tabMembresRecus.length === nbMembresAttendu;",
									"",
									"// Chargement du schéma de données JSON à partir de l'environnement.",
									"const jsonSchemaTabMembres = JSON.parse(environment.json_schema_tab_membres);",
									"// Validation selon le schéma de données JSON.",
									"tests[\"JSON respecte le schéma pour un tableau de membres\"] = tv4.validate(tabMembresRecus, jsonSchemaTabMembres);",
									"if (tv4.error !== null)",
									"    console.log(\"Message de validation schéma JSON (tableau de membres) : \", tv4.error);",
									"",
									""
								]
							}
						}
					],
					"request": {
						"url": {
							"raw": "{{url_base}}/membres?nom=Amir&sexe=F",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"membres"
							],
							"query": [
								{
									"key": "nom",
									"value": "Amir",
									"equals": true,
									"description": ""
								},
								{
									"key": "sexe",
									"value": "F",
									"equals": true,
									"description": ""
								}
							],
							"variable": []
						},
						"method": "GET",
						"header": [],
						"body": {},
						"description": "Recherche de membre avec le nom et le sexe."
					},
					"response": [
						{
							"id": "ea54cde2-3de9-4064-8f5c-0106d9f9ee53",
							"name": "Aucune membre de sexe féminin ont Amir comme prénom ou nom de famille.",
							"originalRequest": {
								"url": {
									"raw": "{{url_base}}/membres?nom=Amir&sexe=F",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"membres"
									],
									"query": [
										{
											"key": "nom",
											"value": "Amir",
											"equals": true,
											"description": ""
										},
										{
											"key": "sexe",
											"value": "F",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [],
								"body": {}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "text",
							"header": [
								{
									"name": "cache-control",
									"key": "cache-control",
									"value": "no-cache",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"name": "content-length",
									"key": "content-length",
									"value": "2",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"name": "content-type",
									"key": "content-type",
									"value": "application/json; charset=utf-8",
									"description": "The mime type of this content"
								},
								{
									"name": "date",
									"key": "date",
									"value": "Tue, 03 Oct 2017 16:09:33 GMT",
									"description": "The date and time that the message was sent"
								},
								{
									"name": "server",
									"key": "server",
									"value": "Development/2.0",
									"description": "A name for the server"
								}
							],
							"cookie": [],
							"responseTime": 556,
							"body": "[]"
						}
					]
				},
				{
					"name": "{{url_base}}/membres?nom=Amy&ville-origine=East St. Louis&ville-actuelle=Indianapolis&sexe=F",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Content-Type est JSON et UTF-8\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json; charset=utf-8\"; ",
									"",
									"// Récupération des données reçues au format JSON.",
									"var tabMembresRecus = JSON.parse(responseBody);",
									"",
									"// Taille du tableau de données attendu dans la réponse JSON.",
									"var nbMembresAttendu = 1;",
									"tests[\"Nb de membres retournés\"] = tabMembresRecus.length === nbMembresAttendu;",
									"",
									"// Chargement du schéma de données JSON à partir de l'environnement.",
									"const jsonSchemaTabMembres = JSON.parse(environment.json_schema_tab_membres);",
									"// Validation selon le schéma de données JSON.",
									"tests[\"JSON respecte le schéma pour un tableau de membres\"] = tv4.validate(tabMembresRecus, jsonSchemaTabMembres);",
									"if (tv4.error !== null)",
									"    console.log(\"Message de validation schéma JSON (tableau de membres) : \", tv4.error);",
									"",
									"if (tabMembresRecus.length >= 1) {",
									"    tests[\"Pas de champs supplémentaires JSON\"] = Object.keys(tabMembresRecus[0]).length === Object.keys(jsonSchemaTabMembres.items.properties).length;",
									"}",
									"",
									"// Tests : Seul membre trouvé:",
									"if (tabMembresRecus.length >= 1) {",
									"    tests[\"Premier membre retourné est Amy Adkins\"] = (tabMembresRecus[0].prenom === \"Amy\" && tabMembresRecus[0].nom_famille === \"Adkins\");",
									"    tests[\"Premier membre : id\"] = tabMembresRecus[0].id === 278;",
									"    tests[\"Premier membre : courriel\"] = tabMembresRecus[0].courriel === \"risus.quis.diam@leoVivamusnibh.com\";",
									"    tests[\"Premier membre : date_naissance\"] = tabMembresRecus[0].date_naissance === \"1985-12-27\";",
									"    tests[\"Premier membre : sexe\"] = tabMembresRecus[0].sexe === \"F\";",
									"    tests[\"Premier membre : nom_util\"] = tabMembresRecus[0].nom_util === \"amyadk\";",
									"    tests[\"Premier membre : ville_actuelle\"] = tabMembresRecus[0].ville_actuelle === \"Indianapolis\";",
									"    tests[\"Premier membre : ville_origine\"] = tabMembresRecus[0].ville_origine === \"East St. Louis\";",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"url": {
							"raw": "{{url_base}}/membres?nom=Amy&ville-origine=East St. Louis&ville-actuelle=Indianapolis&sexe=F",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"membres"
							],
							"query": [
								{
									"key": "nom",
									"value": "Amy",
									"equals": true,
									"description": ""
								},
								{
									"key": "ville-origine",
									"value": "East St. Louis",
									"equals": true,
									"description": ""
								},
								{
									"key": "ville-actuelle",
									"value": "Indianapolis",
									"equals": true,
									"description": ""
								},
								{
									"key": "sexe",
									"value": "F",
									"equals": true,
									"description": ""
								}
							],
							"variable": []
						},
						"method": "GET",
						"header": [],
						"body": {},
						"description": "Recherche de membres avec tous les critères."
					},
					"response": [
						{
							"id": "feb1b6c7-18fb-46f3-a190-c0096aa6b7b7",
							"name": "Une seule personne a Amy comme prénom ou nom, East St. Louis comme ville d'origine, Indianapolis comme ville actuelle et est de sexe féminin.",
							"originalRequest": {
								"url": {
									"raw": "{{url_base}}/membres?nom=Amy&ville-origine=East St. Louis&ville-actuelle=Indianapolis&sexe=F",
									"host": [
										"{{url_base}}"
									],
									"path": [
										"membres"
									],
									"query": [
										{
											"key": "nom",
											"value": "Amy",
											"equals": true,
											"description": ""
										},
										{
											"key": "ville-origine",
											"value": "East St. Louis",
											"equals": true,
											"description": ""
										},
										{
											"key": "ville-actuelle",
											"value": "Indianapolis",
											"equals": true,
											"description": ""
										},
										{
											"key": "sexe",
											"value": "F",
											"equals": true,
											"description": ""
										}
									],
									"variable": []
								},
								"method": "GET",
								"header": [],
								"body": {}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "text",
							"header": [
								{
									"name": "cache-control",
									"key": "cache-control",
									"value": "no-cache",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"name": "content-length",
									"key": "content-length",
									"value": "241",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"name": "content-type",
									"key": "content-type",
									"value": "application/json; charset=utf-8",
									"description": "The mime type of this content"
								},
								{
									"name": "date",
									"key": "date",
									"value": "Tue, 03 Oct 2017 16:12:14 GMT",
									"description": "The date and time that the message was sent"
								},
								{
									"name": "server",
									"key": "server",
									"value": "Development/2.0",
									"description": "A name for the server"
								}
							],
							"cookie": [],
							"responseTime": 1041,
							"body": "[{\"id\": 278, \"ville_origine\": \"East St. Louis\", \"nom_famille\": \"Adkins\", \"sexe\": \"F\", \"nom_util\": \"amyadk\", \"date_naissance\": \"1985-12-27\", \"prenom\": \"Amy\", \"ville_actuelle\": \"Indianapolis\", \"courriel\": \"risus.quis.diam@leoVivamusnibh.com\"}]"
						}
					]
				}
			]
		},
		{
			"name": "CRUD Publications",
			"description": "",
			"item": [
				{
					"name": "Consultation",
					"description": "",
					"item": [
						{
							"name": "{{url_base}}/publications/5",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Content-Type est JSON et UTF-8\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json; charset=utf-8\"; ",
											"",
											"// Récupération des données reçues au format JSON.",
											"var publication = JSON.parse(responseBody);",
											"",
											"// Chargement du schéma de données JSON à partir de l'environnement.",
											"const jsonSchemaPublication = JSON.parse(environment.json_schema_publication);",
											"",
											"// Validation selon le schéma de données JSON.",
											"tests[\"JSON respecte le schéma pour une publication\"] = tv4.validate(publication, jsonSchemaPublication);",
											"if (tv4.error !== null)",
											"    console.log(\"Message de validation schéma JSON publication) : \", tv4.error);",
											"",
											"tests[\"Pas de champs supplémentaires JSON\"] = Object.keys(publication).length === Object.keys(jsonSchemaPublication.properties).length;",
											"",
											"// Tests : Objet retourné représentant la publication.",
											"tests[\"id\"] = publication.id === 5;",
											"tests[\"texte\"] = publication.texte === \"ultricies ligula. Nullam enim. Sed nulla\";",
											"tests[\"date\"] = publication.date === \"2009-12-04\";",
											"tests[\"mem_no_createur\"] = publication.mem_no_createur === 237;",
											"tests[\"mem_no_babillard\"] = publication.mem_no_babillard === 83;",
											"",
											""
										]
									}
								}
							],
							"request": {
								"url": "{{url_base}}/publications/5",
								"method": "GET",
								"header": [],
								"body": {},
								"description": "Consultation de la publication no. 5."
							},
							"response": [
								{
									"id": "80df88d0-3986-4f39-9b52-11f347ae688c",
									"name": "Publication no. 5.",
									"originalRequest": {
										"url": "{{url_base}}/publications/5",
										"method": "GET",
										"header": [],
										"body": {}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "text",
									"header": [
										{
											"name": "cache-control",
											"key": "cache-control",
											"value": "no-cache",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										},
										{
											"name": "content-length",
											"key": "content-length",
											"value": "132",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"name": "content-type",
											"key": "content-type",
											"value": "application/json; charset=utf-8",
											"description": "The mime type of this content"
										},
										{
											"name": "date",
											"key": "date",
											"value": "Thu, 05 Oct 2017 01:11:37 GMT",
											"description": "The date and time that the message was sent"
										},
										{
											"name": "server",
											"key": "server",
											"value": "Development/2.0",
											"description": "A name for the server"
										}
									],
									"cookie": [],
									"responseTime": 568,
									"body": "{\"texte\": \"ultricies ligula. Nullam enim. Sed nulla\", \"id\": 5, \"mem_no_createur\": 237, \"mem_no_babillard\": 83, \"date\": \"2009-12-04\"}"
								}
							]
						},
						{
							"name": "{{url_base}}/publications/9999",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;",
											""
										]
									}
								}
							],
							"request": {
								"url": "{{url_base}}/publications/9999",
								"method": "GET",
								"header": [],
								"body": {},
								"description": "Tentative de consultation d'une publication avec un no. qui n'existe pas."
							},
							"response": [
								{
									"id": "b6f21aad-6d72-4206-8579-4d18d1a03adb",
									"name": "404 Not Found : Le no. de publication n'existe pas.",
									"originalRequest": {
										"url": "{{url_base}}/publications/9999",
										"method": "GET",
										"header": [],
										"body": {}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "html",
									"_postman_previewtype": "text",
									"header": [
										{
											"name": "cache-control",
											"key": "cache-control",
											"value": "no-cache",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										},
										{
											"name": "content-length",
											"key": "content-length",
											"value": "0",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"name": "content-type",
											"key": "content-type",
											"value": "text/html; charset=utf-8",
											"description": "The mime type of this content"
										},
										{
											"name": "date",
											"key": "date",
											"value": "Thu, 05 Oct 2017 01:31:27 GMT",
											"description": "The date and time that the message was sent"
										},
										{
											"name": "server",
											"key": "server",
											"value": "Development/2.0",
											"description": "A name for the server"
										}
									],
									"cookie": [],
									"responseTime": 1556,
									"body": ""
								}
							]
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Création",
					"description": "",
					"item": [
						{
							"name": "{{url_base}}/publications",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Content-Type est JSON et UTF-8\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json; charset=utf-8\"; ",
											"",
											"// Récupération des données reçues au format JSON.",
											"var publication = JSON.parse(responseBody);",
											"",
											"// Chargement du schéma de données JSON à partir de l'environnement.",
											"const jsonSchemaPublication = JSON.parse(environment.json_schema_publication);",
											"",
											"// Validation selon le schéma de données JSON.",
											"tests[\"JSON respecte le schéma pour une publication\"] = tv4.validate(publication, jsonSchemaPublication);",
											"if (tv4.error !== null)",
											"    console.log(\"Message de validation schéma JSON publication) : \", tv4.error);",
											"",
											"tests[\"Pas de champs supplémentaires JSON\"] = Object.keys(publication).length === Object.keys(jsonSchemaPublication.properties).length;",
											"",
											"// Conservation du no. de publication qui vient d'être créé.",
											"postman.setEnvironmentVariable(\"id_dern_pub_creee\", publication.id);",
											"",
											"// Tests : Objet retourné représentant la publication.",
											"tests[\"texte\"] = publication.texte === \"Ce cher Boris n'est pas toujours à son meilleur\";",
											"tests[\"date\"] = publication.date === \"2017-09-11\";",
											"tests[\"mem_no_createur\"] = publication.mem_no_createur === 292;",
											"tests[\"mem_no_babillard\"] = publication.mem_no_babillard === 7;",
											"",
											"// Vérification de l'en-tête \"Location\":",
											"tests[\"En-tête 'Location'\"] = postman.getResponseHeader(\"Location\") === postman.getEnvironmentVariable(\"url_base\") + \"/publications/\" + publication.id;"
										]
									}
								}
							],
							"request": {
								"url": "{{url_base}}/publications",
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"texte\": \"Ce cher Boris n'est pas toujours à son meilleur\", \"date\":\"2017-09-11\", \"mem_no_createur\": 292, \"mem_no_babillard\": 7}"
								},
								"description": "Ajout d'une publication par le membre no. 292 sur le babillard du membre no.7."
							},
							"response": [
								{
									"id": "b6cf28c8-4ca4-4dda-aa8b-715b97327b13",
									"name": "Un nouvelle publication a été créée par le membre no. 292 sur le babillard du membre no.7.",
									"originalRequest": {
										"url": "{{url_base}}/publications",
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": ""
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"texte\": \"Ce cher Boris n'est pas toujours à son meilleur\", \"date\":\"2017-09-11\", \"mem_no_createur\": 292, \"mem_no_babillard\": 7}"
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "text",
									"header": [
										{
											"name": "cache-control",
											"key": "cache-control",
											"value": "no-cache",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										},
										{
											"name": "content-length",
											"key": "content-length",
											"value": "158",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"name": "content-type",
											"key": "content-type",
											"value": "application/json; charset=utf-8",
											"description": "The mime type of this content"
										},
										{
											"name": "date",
											"key": "date",
											"value": "Thu, 05 Oct 2017 00:45:45 GMT",
											"description": "The date and time that the message was sent"
										},
										{
											"name": "location",
											"key": "location",
											"value": "http://localhost:9080/publications/6051711999279104",
											"description": "Used in redirection, or when a new resource has been created."
										},
										{
											"name": "server",
											"key": "server",
											"value": "Development/2.0",
											"description": "A name for the server"
										}
									],
									"cookie": [],
									"responseTime": 591,
									"body": "{\"texte\": \"Ce cher Boris n'est pas toujours \\u00e0 son meilleur\", \"mem_no_babillard\": 7, \"id\": 6051711999279104, \"date\": \"2017-09-11\", \"mem_no_createur\": 292}"
								}
							]
						},
						{
							"name": "{{url_base}}/publications/{{id_dern_pub_creee}}",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Content-Type est JSON et UTF-8\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json; charset=utf-8\"; ",
											"",
											"// Récupération des données reçues au format JSON.",
											"var publication = JSON.parse(responseBody);",
											"",
											"// Chargement du schéma de données JSON à partir de l'environnement.",
											"const jsonSchemaPublication = JSON.parse(environment.json_schema_publication);",
											"",
											"// Validation selon le schéma de données JSON.",
											"tests[\"JSON respecte le schéma pour une publication\"] = tv4.validate(publication, jsonSchemaPublication);",
											"if (tv4.error !== null)",
											"    console.log(\"Message de validation schéma JSON publication) : \", tv4.error);",
											"",
											"tests[\"Pas de champs supplémentaires JSON\"] = Object.keys(publication).length === Object.keys(jsonSchemaPublication.properties).length;",
											"",
											"// Tests : Objet retourné représentant la publication.",
											"tests[\"id\"] = publication.id === parseInt(postman.getEnvironmentVariable(\"id_dern_pub_creee\"));",
											"tests[\"texte\"] = publication.texte === \"Ce cher Boris n'est pas toujours à son meilleur\";",
											"tests[\"date\"] = publication.date === \"2017-09-11\";",
											"tests[\"mem_no_createur\"] = publication.mem_no_createur === 292;",
											"tests[\"mem_no_babillard\"] = publication.mem_no_babillard === 7;",
											"",
											""
										]
									}
								}
							],
							"request": {
								"url": "{{url_base}}/publications/{{id_dern_pub_creee}}",
								"method": "GET",
								"header": [],
								"body": {},
								"description": "Vérification que la dernière publication créée peut être consultée."
							},
							"response": [
								{
									"id": "7040b157-6b7a-4800-8b68-aaa539bcd0d0",
									"name": "Consultation de la dernière publication créée.",
									"originalRequest": {
										"url": "{{url_base}}/publications/{{id_dern_pub_creee}}",
										"method": "GET",
										"header": [],
										"body": {}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "text",
									"header": [
										{
											"name": "cache-control",
											"key": "cache-control",
											"value": "no-cache",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										},
										{
											"name": "content-length",
											"key": "content-length",
											"value": "158",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"name": "content-type",
											"key": "content-type",
											"value": "application/json; charset=utf-8",
											"description": "The mime type of this content"
										},
										{
											"name": "date",
											"key": "date",
											"value": "Thu, 05 Oct 2017 01:18:13 GMT",
											"description": "The date and time that the message was sent"
										},
										{
											"name": "server",
											"key": "server",
											"value": "Development/2.0",
											"description": "A name for the server"
										}
									],
									"cookie": [],
									"responseTime": 624,
									"body": "{\"texte\": \"Ce cher Boris n'est pas toujours \\u00e0 son meilleur\", \"id\": 6614661952700416, \"mem_no_createur\": 292, \"mem_no_babillard\": 7, \"date\": \"2017-09-11\"}"
								}
							]
						},
						{
							"name": "{{url_base}}/publications (mauvais no. de membre créateur)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											""
										]
									}
								}
							],
							"request": {
								"url": "{{url_base}}/publications",
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"texte\": \"Ce cher Boris n'est pas toujours à son meilleur\", \"date\":\"2017-09-11\", \"mem_no_createur\": 9999, \"mem_no_babillard\": 7}"
								},
								"description": "Tentative d'ajout d'une publication avec un mauvais numéro de membre créateur."
							},
							"response": [
								{
									"id": "8ac47ab2-7ff7-4332-a537-d771324cff75",
									"name": "400 Bad Request : Mauvais numéro de membre créateur.",
									"originalRequest": {
										"url": "{{url_base}}/publications",
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": ""
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"texte\": \"Ce cher Boris n'est pas toujours à son meilleur\", \"date\":\"2017-09-11\", \"mem_no_createur\": 9999, \"mem_no_babillard\": 7}"
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "html",
									"_postman_previewtype": "text",
									"header": [
										{
											"name": "cache-control",
											"key": "cache-control",
											"value": "no-cache",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										},
										{
											"name": "content-length",
											"key": "content-length",
											"value": "0",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"name": "content-type",
											"key": "content-type",
											"value": "text/html; charset=utf-8",
											"description": "The mime type of this content"
										},
										{
											"name": "date",
											"key": "date",
											"value": "Thu, 05 Oct 2017 00:51:43 GMT",
											"description": "The date and time that the message was sent"
										},
										{
											"name": "server",
											"key": "server",
											"value": "Development/2.0",
											"description": "A name for the server"
										}
									],
									"cookie": [],
									"responseTime": 570,
									"body": ""
								}
							]
						},
						{
							"name": "{{url_base}}/publications (mauvais no. de membre du babillard)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;",
											""
										]
									}
								}
							],
							"request": {
								"url": "{{url_base}}/publications",
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"texte\": \"Ce cher Boris n'est pas toujours à son meilleur\", \"date\":\"2017-09-11\", \"mem_no_createur\": 292, \"mem_no_babillard\": 9999}"
								},
								"description": "Tentative d'ajout d'une publication avec un mauvais numéro de membre du babillard."
							},
							"response": [
								{
									"id": "4e161a1f-df73-4c28-a8b4-84a2a07153bb",
									"name": "400 Bad Request :  Mauvais numéro de membre du babillard.",
									"originalRequest": {
										"url": "{{url_base}}/publications",
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": ""
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"texte\": \"Ce cher Boris n'est pas toujours à son meilleur\", \"date\":\"2017-09-11\", \"mem_no_createur\": 292, \"mem_no_babillard\": 9999}"
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "html",
									"_postman_previewtype": "text",
									"header": [
										{
											"name": "cache-control",
											"key": "cache-control",
											"value": "no-cache",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										},
										{
											"name": "content-length",
											"key": "content-length",
											"value": "0",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"name": "content-type",
											"key": "content-type",
											"value": "text/html; charset=utf-8",
											"description": "The mime type of this content"
										},
										{
											"name": "date",
											"key": "date",
											"value": "Thu, 05 Oct 2017 00:55:40 GMT",
											"description": "The date and time that the message was sent"
										},
										{
											"name": "server",
											"key": "server",
											"value": "Development/2.0",
											"description": "A name for the server"
										}
									],
									"cookie": [],
									"responseTime": 382,
									"body": ""
								}
							]
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Modification",
					"description": "",
					"item": [
						{
							"name": "{{url_base}}/publications/6",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Content-Type est JSON et UTF-8\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json; charset=utf-8\"; ",
											"",
											"// Récupération des données reçues au format JSON.",
											"var publication = JSON.parse(responseBody);",
											"",
											"// Chargement du schéma de données JSON à partir de l'environnement.",
											"const jsonSchemaPublication = JSON.parse(environment.json_schema_publication);",
											"",
											"// Validation selon le schéma de données JSON.",
											"tests[\"JSON respecte le schéma pour une publication\"] = tv4.validate(publication, jsonSchemaPublication);",
											"if (tv4.error !== null)",
											"    console.log(\"Message de validation schéma JSON publication) : \", tv4.error);",
											"",
											"tests[\"Pas de champs supplémentaires JSON\"] = Object.keys(publication).length === Object.keys(jsonSchemaPublication.properties).length;",
											"",
											"// Tests : Objet retourné représentant la publication.",
											"tests[\"id\"] = publication.id === 6;",
											"tests[\"texte\"] = publication.texte === \"NOUVEAU TEXTE\";",
											"tests[\"date\"] = publication.date === \"2017-10-04\";",
											"tests[\"mem_no_createur\"] = publication.mem_no_createur === 101;",
											"tests[\"mem_no_babillard\"] = publication.mem_no_babillard === 99;",
											""
										]
									}
								}
							],
							"request": {
								"url": "{{url_base}}/publications/6",
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 6,\n    \"mem_no_createur\": 101,\n    \"texte\": \"NOUVEAU TEXTE\",\n    \"date\": \"2017-10-04\",\n    \"mem_no_babillard\": 99\n}"
								},
								"description": "Modification (texte, no. de membre du babillard et date) de la publication no. 6."
							},
							"response": [
								{
									"id": "48f85188-e000-451e-93ec-4a50306c7b64",
									"name": "La publication no. 6 a été modifiée (texte, no. de membre du babillard et date).",
									"originalRequest": {
										"url": "{{url_base}}/publications/6",
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": ""
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 6,\n    \"mem_no_createur\": 101,\n    \"texte\": \"NOUVEAU TEXTE\",\n    \"date\": \"2017-10-04\",\n    \"mem_no_babillard\": 99\n}"
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "text",
									"header": [
										{
											"name": "cache-control",
											"key": "cache-control",
											"value": "no-cache",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										},
										{
											"name": "content-length",
											"key": "content-length",
											"value": "105",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"name": "content-type",
											"key": "content-type",
											"value": "application/json; charset=utf-8",
											"description": "The mime type of this content"
										},
										{
											"name": "date",
											"key": "date",
											"value": "Thu, 05 Oct 2017 12:23:38 GMT",
											"description": "The date and time that the message was sent"
										},
										{
											"name": "server",
											"key": "server",
											"value": "Development/2.0",
											"description": "A name for the server"
										}
									],
									"cookie": [],
									"responseTime": 1610,
									"body": "{\"texte\": \"NOUVEAU TEXTE\", \"mem_no_babillard\": 99, \"mem_no_createur\": 101, \"id\": 6, \"date\": \"2017-10-04\"}"
								}
							]
						},
						{
							"name": "{{url_base}}/publications/6 (redo)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Content-Type est JSON et UTF-8\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json; charset=utf-8\"; ",
											"",
											"// Récupération des données reçues au format JSON.",
											"var publication = JSON.parse(responseBody);",
											"",
											"// Chargement du schéma de données JSON à partir de l'environnement.",
											"const jsonSchemaPublication = JSON.parse(environment.json_schema_publication);",
											"",
											"// Validation selon le schéma de données JSON.",
											"tests[\"JSON respecte le schéma pour une publication\"] = tv4.validate(publication, jsonSchemaPublication);",
											"if (tv4.error !== null)",
											"    console.log(\"Message de validation schéma JSON publication) : \", tv4.error);",
											"",
											"tests[\"Pas de champs supplémentaires JSON\"] = Object.keys(publication).length === Object.keys(jsonSchemaPublication.properties).length;",
											"",
											"// Tests : Objet retourné représentant la publication.",
											"tests[\"id\"] = publication.id === 6;",
											"tests[\"texte\"] = publication.texte === \"NOUVEAU TEXTE\";",
											"tests[\"date\"] = publication.date === \"2017-10-04\";",
											"tests[\"mem_no_createur\"] = publication.mem_no_createur === 101;",
											"tests[\"mem_no_babillard\"] = publication.mem_no_babillard === 99;",
											""
										]
									}
								}
							],
							"request": {
								"url": "{{url_base}}/publications/6",
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 6,\n    \"mem_no_createur\": 101,\n    \"texte\": \"NOUVEAU TEXTE\",\n    \"date\": \"2017-10-04\",\n    \"mem_no_babillard\": 99\n}"
								},
								"description": "Modification (texte, no. de membre du babillard et date) de la publication no. 6."
							},
							"response": [
								{
									"id": "1ce5570d-f3df-481d-9b1d-d08dd538e34c",
									"name": "La publication no. 6 a été modifiée (texte, no. de membre du babillard et date).",
									"originalRequest": {
										"url": "{{url_base}}/publications/6",
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": ""
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 6,\n    \"mem_no_createur\": 101,\n    \"texte\": \"NOUVEAU TEXTE\",\n    \"date\": \"2017-10-04\",\n    \"mem_no_babillard\": 99\n}"
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "text",
									"header": [
										{
											"name": "cache-control",
											"key": "cache-control",
											"value": "no-cache",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										},
										{
											"name": "content-length",
											"key": "content-length",
											"value": "105",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"name": "content-type",
											"key": "content-type",
											"value": "application/json; charset=utf-8",
											"description": "The mime type of this content"
										},
										{
											"name": "date",
											"key": "date",
											"value": "Thu, 05 Oct 2017 16:45:00 GMT",
											"description": "The date and time that the message was sent"
										},
										{
											"name": "server",
											"key": "server",
											"value": "Development/2.0",
											"description": "A name for the server"
										}
									],
									"cookie": [],
									"responseTime": 607,
									"body": "{\"texte\": \"NOUVEAU TEXTE\", \"date\": \"2017-10-04\", \"id\": 6, \"mem_no_createur\": 101, \"mem_no_babillard\": 99}"
								}
							]
						},
						{
							"name": "{{url_base}}/publications/6",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Content-Type est JSON et UTF-8\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json; charset=utf-8\"; ",
											"",
											"// Récupération des données reçues au format JSON.",
											"var publication = JSON.parse(responseBody);",
											"",
											"// Chargement du schéma de données JSON à partir de l'environnement.",
											"const jsonSchemaPublication = JSON.parse(environment.json_schema_publication);",
											"",
											"// Validation selon le schéma de données JSON.",
											"tests[\"JSON respecte le schéma pour une publication\"] = tv4.validate(publication, jsonSchemaPublication);",
											"if (tv4.error !== null)",
											"    console.log(\"Message de validation schéma JSON publication) : \", tv4.error);",
											"",
											"tests[\"Pas de champs supplémentaires JSON\"] = Object.keys(publication).length === Object.keys(jsonSchemaPublication.properties).length;",
											"",
											"// Tests : Objet retourné représentant la publication.",
											"tests[\"id\"] = publication.id === 6;",
											"tests[\"texte\"] = publication.texte === \"NOUVEAU TEXTE\";",
											"tests[\"date\"] = publication.date === \"2017-10-04\";",
											"tests[\"mem_no_createur\"] = publication.mem_no_createur === 101;",
											"tests[\"mem_no_babillard\"] = publication.mem_no_babillard === 99;",
											""
										]
									}
								}
							],
							"request": {
								"url": "{{url_base}}/publications/6",
								"method": "GET",
								"header": [],
								"body": {},
								"description": "Vérification de la modification de la publication no. 6."
							},
							"response": [
								{
									"id": "a83b20c6-0389-4fc1-a78c-931ddae4067f",
									"name": "La publication no. 6 a bien été modifiée.",
									"originalRequest": {
										"url": "{{url_base}}/publications/6",
										"method": "GET",
										"header": [],
										"body": {}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "text",
									"header": [
										{
											"name": "cache-control",
											"key": "cache-control",
											"value": "no-cache",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										},
										{
											"name": "content-length",
											"key": "content-length",
											"value": "105",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"name": "content-type",
											"key": "content-type",
											"value": "application/json; charset=utf-8",
											"description": "The mime type of this content"
										},
										{
											"name": "date",
											"key": "date",
											"value": "Thu, 05 Oct 2017 12:24:29 GMT",
											"description": "The date and time that the message was sent"
										},
										{
											"name": "server",
											"key": "server",
											"value": "Development/2.0",
											"description": "A name for the server"
										}
									],
									"cookie": [],
									"responseTime": 1177,
									"body": "{\"mem_no_babillard\": 99, \"id\": 6, \"mem_no_createur\": 101, \"date\": \"2017-10-04\", \"texte\": \"NOUVEAU TEXTE\"}"
								}
							]
						},
						{
							"name": "{{url_base}}/publications/9999",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;"
										]
									}
								}
							],
							"request": {
								"url": "{{url_base}}/publications/9999",
								"method": "PUT",
								"header": [],
								"body": {},
								"description": "Tentative de modification d'une publication qui n'existe pas."
							},
							"response": [
								{
									"id": "735216b5-7bf1-47f8-8183-6bfee01b04ee",
									"name": "404 Not Found : La publication n'existe pas.",
									"originalRequest": {
										"url": "{{url_base}}/publications/9999",
										"method": "PUT",
										"header": [],
										"body": {}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "html",
									"_postman_previewtype": "text",
									"header": [
										{
											"name": "cache-control",
											"key": "cache-control",
											"value": "no-cache",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										},
										{
											"name": "content-length",
											"key": "content-length",
											"value": "0",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"name": "content-type",
											"key": "content-type",
											"value": "text/html; charset=utf-8",
											"description": "The mime type of this content"
										},
										{
											"name": "date",
											"key": "date",
											"value": "Thu, 05 Oct 2017 01:49:39 GMT",
											"description": "The date and time that the message was sent"
										},
										{
											"name": "server",
											"key": "server",
											"value": "Development/2.0",
											"description": "A name for the server"
										}
									],
									"cookie": [],
									"responseTime": 1683,
									"body": ""
								}
							]
						},
						{
							"name": "{{url_base}}/publications/6",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;"
										]
									}
								}
							],
							"request": {
								"url": "{{url_base}}/publications/6",
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 9999,\n    \"mem_no_createur\": 101,\n    \"texte\": \"NOUVEAU TEXTE\",\n    \"date\": \"2017-10-04\",\n    \"mem_no_babillard\": 99\n}"
								},
								"description": "Tentative de modification du no. de publication."
							},
							"response": [
								{
									"id": "49da1f76-3e9d-4a28-884b-b3c4f00b0058",
									"name": "400 Bad Request : Impossible de modifier le no. de publication.",
									"originalRequest": {
										"url": "{{url_base}}/publications/6",
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": ""
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 9999,\n    \"mem_no_createur\": 101,\n    \"texte\": \"NOUVEAU TEXTE\",\n    \"date\": \"2017-10-04\",\n    \"mem_no_babillard\": 99\n}"
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "html",
									"_postman_previewtype": "text",
									"header": [
										{
											"name": "cache-control",
											"key": "cache-control",
											"value": "no-cache",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										},
										{
											"name": "content-length",
											"key": "content-length",
											"value": "0",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"name": "content-type",
											"key": "content-type",
											"value": "text/html; charset=utf-8",
											"description": "The mime type of this content"
										},
										{
											"name": "date",
											"key": "date",
											"value": "Thu, 05 Oct 2017 16:59:47 GMT",
											"description": "The date and time that the message was sent"
										},
										{
											"name": "server",
											"key": "server",
											"value": "Development/2.0",
											"description": "A name for the server"
										}
									],
									"cookie": [],
									"responseTime": 1763,
									"body": ""
								}
							]
						},
						{
							"name": "{{url_base}}/publications/6",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;"
										]
									}
								}
							],
							"request": {
								"url": "{{url_base}}/publications/6",
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 6,\n    \"mem_no_createur\": 25,\n    \"texte\": \"NOUVEAU TEXTE\",\n    \"date\": \"2017-10-04\",\n    \"mem_no_babillard\": 99\n}"
								},
								"description": "Tentative de modification du no. du membre créateur de la publication."
							},
							"response": [
								{
									"id": "89248e2f-38ec-45ed-8126-d9d00e114bea",
									"name": "400 Bad Request : Impossible de modifier le no. du membre créateur de la publication.",
									"originalRequest": {
										"url": "{{url_base}}/publications/6",
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": ""
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 6,\n    \"mem_no_createur\": 25,\n    \"texte\": \"NOUVEAU TEXTE\",\n    \"date\": \"2017-10-04\",\n    \"mem_no_babillard\": 99\n}"
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "html",
									"_postman_previewtype": "text",
									"header": [
										{
											"name": "cache-control",
											"key": "cache-control",
											"value": "no-cache",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										},
										{
											"name": "content-length",
											"key": "content-length",
											"value": "0",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"name": "content-type",
											"key": "content-type",
											"value": "text/html; charset=utf-8",
											"description": "The mime type of this content"
										},
										{
											"name": "date",
											"key": "date",
											"value": "Thu, 05 Oct 2017 16:53:32 GMT",
											"description": "The date and time that the message was sent"
										},
										{
											"name": "server",
											"key": "server",
											"value": "Development/2.0",
											"description": "A name for the server"
										}
									],
									"cookie": [],
									"responseTime": 1656,
									"body": ""
								}
							]
						},
						{
							"name": "{{url_base}}/publications/6",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 400\"] = responseCode.code === 400;"
										]
									}
								}
							],
							"request": {
								"url": "{{url_base}}/publications/6",
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 6,\n    \"mem_no_createur\": 101,\n    \"texte\": \"NOUVEAU TEXTE\",\n    \"date\": \"2017-10-04\",\n    \"mem_no_babillard\": 9999\n}"
								},
								"description": "Tentative de modifier la publication en lui attribuant un no. de membre du babillard qui n'existe pas."
							},
							"response": [
								{
									"id": "7d1ab53d-dc25-4e8f-81f7-542abbec057d",
									"name": "400 Bad Request : Impossible d'attribuer à la publication un no. de membre du babillard qui n'existe pas.",
									"originalRequest": {
										"url": "{{url_base}}/publications/6",
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"description": ""
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 6,\n    \"mem_no_createur\": 101,\n    \"texte\": \"NOUVEAU TEXTE\",\n    \"date\": \"2017-10-04\",\n    \"mem_no_babillard\": 9999\n}"
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "html",
									"_postman_previewtype": "text",
									"header": [
										{
											"name": "cache-control",
											"key": "cache-control",
											"value": "no-cache",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										},
										{
											"name": "content-length",
											"key": "content-length",
											"value": "0",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"name": "content-type",
											"key": "content-type",
											"value": "text/html; charset=utf-8",
											"description": "The mime type of this content"
										},
										{
											"name": "date",
											"key": "date",
											"value": "Thu, 05 Oct 2017 17:08:08 GMT",
											"description": "The date and time that the message was sent"
										},
										{
											"name": "server",
											"key": "server",
											"value": "Development/2.0",
											"description": "A name for the server"
										}
									],
									"cookie": [],
									"responseTime": 1554,
									"body": ""
								}
							]
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Destruction",
					"description": "",
					"item": [
						{
							"name": "{{url_base}}/publications/7",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;"
										]
									}
								}
							],
							"request": {
								"url": "{{url_base}}/publications/7",
								"method": "DELETE",
								"header": [],
								"body": {},
								"description": "Destruction de la publication no. 7."
							},
							"response": [
								{
									"id": "78383338-2bd7-416f-ba1c-b25ec140810a",
									"name": "204 No Content: La publication no. 7 a été détruite.",
									"originalRequest": {
										"url": "{{url_base}}/publications/7",
										"method": "DELETE",
										"header": [],
										"body": {}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "html",
									"_postman_previewtype": "text",
									"header": [
										{
											"name": "cache-control",
											"key": "cache-control",
											"value": "no-cache",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										},
										{
											"name": "content-type",
											"key": "content-type",
											"value": "text/html; charset=utf-8",
											"description": "The mime type of this content"
										},
										{
											"name": "date",
											"key": "date",
											"value": "Thu, 05 Oct 2017 01:33:13 GMT",
											"description": "The date and time that the message was sent"
										},
										{
											"name": "server",
											"key": "server",
											"value": "Development/2.0",
											"description": "A name for the server"
										}
									],
									"cookie": [],
									"responseTime": 547,
									"body": ""
								}
							]
						},
						{
							"name": "{{url_base}}/publications/7 (redo)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;"
										]
									}
								}
							],
							"request": {
								"url": "{{url_base}}/publications/7",
								"method": "DELETE",
								"header": [],
								"body": {},
								"description": "Destruction de la publication no. 7."
							},
							"response": [
								{
									"id": "5a2984de-ccfb-4d42-9612-741a89399475",
									"name": "204 No Content: La publication no. 7 a été détruite.",
									"originalRequest": {
										"url": "{{url_base}}/publications/7",
										"method": "DELETE",
										"header": [],
										"body": {}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "html",
									"_postman_previewtype": "text",
									"header": [
										{
											"name": "cache-control",
											"key": "cache-control",
											"value": "no-cache",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										},
										{
											"name": "content-type",
											"key": "content-type",
											"value": "text/html; charset=utf-8",
											"description": "The mime type of this content"
										},
										{
											"name": "date",
											"key": "date",
											"value": "Thu, 05 Oct 2017 01:35:14 GMT",
											"description": "The date and time that the message was sent"
										},
										{
											"name": "server",
											"key": "server",
											"value": "Development/2.0",
											"description": "A name for the server"
										}
									],
									"cookie": [],
									"responseTime": 572,
									"body": ""
								}
							]
						},
						{
							"name": "{{url_base}}/publications/7",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;"
										]
									}
								}
							],
							"request": {
								"url": "{{url_base}}/publications/7",
								"method": "GET",
								"header": [],
								"body": {},
								"description": "Tentative de consultation de la publication no. 7 après sa destruction."
							},
							"response": [
								{
									"id": "a27b11c2-ca57-4350-aa52-2344f4ef2112",
									"name": "404 Not Found: La publication no. 7 n'existe pas.",
									"originalRequest": {
										"url": "{{url_base}}/publications/7",
										"method": "GET",
										"header": [],
										"body": {}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "html",
									"_postman_previewtype": "text",
									"header": [
										{
											"name": "cache-control",
											"key": "cache-control",
											"value": "no-cache",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										},
										{
											"name": "content-length",
											"key": "content-length",
											"value": "0",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"name": "content-type",
											"key": "content-type",
											"value": "text/html; charset=utf-8",
											"description": "The mime type of this content"
										},
										{
											"name": "date",
											"key": "date",
											"value": "Thu, 05 Oct 2017 01:35:38 GMT",
											"description": "The date and time that the message was sent"
										},
										{
											"name": "server",
											"key": "server",
											"value": "Development/2.0",
											"description": "A name for the server"
										}
									],
									"cookie": [],
									"responseTime": 505,
									"body": ""
								}
							]
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Consultation amis et demandes d'amitié",
			"description": "",
			"item": [
				{
					"name": "{{url_base}}/membres/11/amis",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Content-Type est JSON et UTF-8\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json; charset=utf-8\"; ",
									"",
									"// Récupération des données reçues au format JSON.",
									"var tabAmisRecus = JSON.parse(responseBody);",
									"",
									"// Taille du tableau de données attendu dans la réponse JSON.",
									"var nbAmisAttendu = 25;",
									"tests[\"Nb d'amis retournés\"] = tabAmisRecus.length === nbAmisAttendu;",
									"",
									"// Chargement du schéma de données JSON à partir de l'environnement.",
									"const jsonSchemaTabAmis = JSON.parse(environment.json_schema_tab_amis);",
									"// Validation selon le schéma de données JSON.",
									"tests[\"JSON respecte le schéma pour un tableau d'amis\"] = tv4.validate(tabAmisRecus, jsonSchemaTabAmis);",
									"if (tv4.error !== null)",
									"    console.log(\"Message de validation schéma JSON (tableau d'amis) : \", tv4.error);",
									"",
									"if (tabAmisRecus.length >= 1) {",
									"    tests[\"Pas de champs supplémentaires JSON\"] = Object.keys(tabAmisRecus[0]).length === Object.keys(jsonSchemaTabAmis.items.properties).length;",
									"}",
									"",
									"// Tests : Premier ami:",
									"if (tabAmisRecus.length >= 1) {",
									"    tests[\"Premier ami retourné est Boris Barrera\"] = (tabAmisRecus[0].prenom === \"Boris\" && tabAmisRecus[0].nom_famille === \"Barrera\");",
									"    tests[\"Premier ami : id\"] = tabAmisRecus[0].id === 7;",
									"    tests[\"Premier ami : date_amitie\"] = tabAmisRecus[0].date_amitie === \"2010-04-13\";",
									"}",
									"",
									"// Tests : Dernier ami:",
									"if (tabAmisRecus.length >= nbAmisAttendu) {",
									"    tests[\"Dernier ami retourné est Bianca Talley\"] = (tabAmisRecus[nbAmisAttendu-1].prenom === \"Bianca\" && tabAmisRecus[nbAmisAttendu-1].nom_famille === \"Talley\");",
									"    tests[\"Dernier ami : id\"] = tabAmisRecus[nbAmisAttendu-1].id === 394;",
									"    tests[\"Dernier ami : date_amitie\"] = tabAmisRecus[nbAmisAttendu-1].date_amitie === \"2011-01-30\";",
									"}"
								]
							}
						}
					],
					"request": {
						"url": "{{url_base}}/membres/11/amis",
						"method": "GET",
						"header": [],
						"body": {},
						"description": "Consultation des amis du membre no. 11"
					},
					"response": [
						{
							"id": "4c503ff5-aef6-4ac8-972f-563f5e8f2841",
							"name": "Les 25 amis du membre no 11.",
							"originalRequest": {
								"url": "{{url_base}}/membres/11/amis",
								"method": "GET",
								"header": [],
								"body": {}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "text",
							"header": [
								{
									"name": "cache-control",
									"key": "cache-control",
									"value": "no-cache",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"name": "content-length",
									"key": "content-length",
									"value": "2154",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"name": "content-type",
									"key": "content-type",
									"value": "application/json; charset=utf-8",
									"description": "The mime type of this content"
								},
								{
									"name": "date",
									"key": "date",
									"value": "Wed, 04 Oct 2017 01:34:40 GMT",
									"description": "The date and time that the message was sent"
								},
								{
									"name": "server",
									"key": "server",
									"value": "Development/2.0",
									"description": "A name for the server"
								}
							],
							"cookie": [],
							"responseTime": 4065,
							"body": "[{\"nom_famille\": \"Barrera\", \"id\": 7, \"date_amitie\": \"2010-04-13\", \"prenom\": \"Boris\"}, {\"nom_famille\": \"Buck\", \"id\": 42, \"date_amitie\": \"2011-01-24\", \"prenom\": \"Gage\"}, {\"nom_famille\": \"Poole\", \"id\": 98, \"date_amitie\": \"2009-03-01\", \"prenom\": \"Brandon\"}, {\"nom_famille\": \"Frost\", \"id\": 120, \"date_amitie\": \"2010-10-11\", \"prenom\": \"Harper\"}, {\"nom_famille\": \"Sykes\", \"id\": 132, \"date_amitie\": \"2009-08-04\", \"prenom\": \"Arden\"}, {\"nom_famille\": \"Wall\", \"id\": 199, \"date_amitie\": \"2010-07-13\", \"prenom\": \"Phelan\"}, {\"nom_famille\": \"Christian\", \"id\": 222, \"date_amitie\": \"2010-11-08\", \"prenom\": \"Carol\"}, {\"nom_famille\": \"White\", \"id\": 234, \"date_amitie\": \"2011-02-08\", \"prenom\": \"Anastasia\"}, {\"nom_famille\": \"Graves\", \"id\": 250, \"date_amitie\": \"2010-10-26\", \"prenom\": \"Charissa\"}, {\"nom_famille\": \"Adkins\", \"id\": 278, \"date_amitie\": \"2009-07-30\", \"prenom\": \"Amy\"}, {\"nom_famille\": \"Odom\", \"id\": 363, \"date_amitie\": \"2010-03-29\", \"prenom\": \"Anne\"}, {\"nom_famille\": \"Stevenson\", \"id\": 380, \"date_amitie\": \"2010-09-22\", \"prenom\": \"Shay\"}, {\"nom_famille\": \"Chang\", \"id\": 35, \"date_amitie\": \"2010-01-08\", \"prenom\": \"Xanthus\"}, {\"nom_famille\": \"James\", \"id\": 90, \"date_amitie\": \"2010-11-12\", \"prenom\": \"Gil\"}, {\"nom_famille\": \"Holman\", \"id\": 137, \"date_amitie\": \"2010-06-16\", \"prenom\": \"Harper\"}, {\"nom_famille\": \"Romero\", \"id\": 178, \"date_amitie\": \"2010-06-12\", \"prenom\": \"Eagan\"}, {\"nom_famille\": \"Corvan\", \"id\": 191, \"date_amitie\": \"2009-03-25\", \"prenom\": \"Ross\"}, {\"nom_famille\": \"Mullins\", \"id\": 211, \"date_amitie\": \"2010-04-10\", \"prenom\": \"Jeanette\"}, {\"nom_famille\": \"Mccoy\", \"id\": 225, \"date_amitie\": \"2010-01-11\", \"prenom\": \"Jael\"}, {\"nom_famille\": \"Guzman\", \"id\": 238, \"date_amitie\": \"2009-04-16\", \"prenom\": \"Larissa\"}, {\"nom_famille\": \"Mcintyre\", \"id\": 266, \"date_amitie\": \"2010-04-19\", \"prenom\": \"Kim\"}, {\"nom_famille\": \"Bullock\", \"id\": 320, \"date_amitie\": \"2010-05-21\", \"prenom\": \"Scarlett\"}, {\"nom_famille\": \"Nelson\", \"id\": 361, \"date_amitie\": \"2010-12-06\", \"prenom\": \"Tasha\"}, {\"nom_famille\": \"Dunlap\", \"id\": 381, \"date_amitie\": \"2009-07-28\", \"prenom\": \"Rhoda\"}, {\"nom_famille\": \"Talley\", \"id\": 394, \"date_amitie\": \"2011-01-30\", \"prenom\": \"Bianca\"}]"
						}
					]
				},
				{
					"name": "{{url_base}}/membres/9999/amis",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;"
								]
							}
						}
					],
					"request": {
						"url": "{{url_base}}/membres/9999/amis",
						"method": "GET",
						"header": [],
						"body": {},
						"description": "Consultation des amis d'un membre avec un no de membre qui n'existe pas."
					},
					"response": [
						{
							"id": "90a64851-ee8a-4b20-8182-6d5219e51cf6",
							"name": "404 Not Found : Le no de membre est inexistant.",
							"originalRequest": {
								"url": "{{url_base}}/membres/9999/amis",
								"method": "GET",
								"header": [],
								"body": {}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "html",
							"_postman_previewtype": "text",
							"header": [
								{
									"name": "cache-control",
									"key": "cache-control",
									"value": "no-cache",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"name": "content-length",
									"key": "content-length",
									"value": "0",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"name": "content-type",
									"key": "content-type",
									"value": "text/html; charset=utf-8",
									"description": "The mime type of this content"
								},
								{
									"name": "date",
									"key": "date",
									"value": "Wed, 04 Oct 2017 00:51:45 GMT",
									"description": "The date and time that the message was sent"
								},
								{
									"name": "server",
									"key": "server",
									"value": "Development/2.0",
									"description": "A name for the server"
								}
							],
							"cookie": [],
							"responseTime": 1242,
							"body": ""
						}
					]
				},
				{
					"name": "{{url_base}}/membres/123/demandes",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Content-Type est JSON et UTF-8\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json; charset=utf-8\"; ",
									"",
									"// Récupération des données reçues au format JSON.",
									"var tabDemandesRecus = JSON.parse(responseBody);",
									"",
									"// Taille du tableau de données attendu dans la réponse JSON.",
									"var nbDemAttendu = 3;",
									"tests[\"Nb de demandes retournées\"] = tabDemandesRecus.length === nbDemAttendu;",
									"",
									"// Chargement du schéma de données JSON à partir de l'environnement.",
									"const jsonSchemaTabDemandes = JSON.parse(environment.json_schema_tab_demandes);",
									"// Validation selon le schéma de données JSON.",
									"tests[\"JSON respecte le schéma pour un tableau de demandes\"] = tv4.validate(tabDemandesRecus, jsonSchemaTabDemandes);",
									"if (tv4.error !== null)",
									"    console.log(\"Message de validation schéma JSON (tableau d'amis) : \", tv4.error);",
									"",
									"if (tabDemandesRecus.length >= 1) {",
									"    tests[\"Pas de champs supplémentaires JSON\"] = Object.keys(tabDemandesRecus[0]).length === Object.keys(jsonSchemaTabDemandes.items.properties).length;",
									"}",
									"",
									"// Tests : Première demande:",
									"if (tabDemandesRecus.length >= 1) {",
									"    tests[\"Première demande retournée est de Garrett Meadows\"] = (tabDemandesRecus[0].prenom === \"Garrett\" && tabDemandesRecus[0].nom_famille === \"Meadows\");",
									"    tests[\"Premier demande : id\"] = tabDemandesRecus[0].id === 38;",
									"    tests[\"Premier demande : date_demande\"] = tabDemandesRecus[0].date_demande === \"2010-08-31\";",
									"}",
									"",
									"// Tests : Dernier demande:",
									"if (tabDemandesRecus.length >= nbDemAttendu) {",
									"    tests[\"Dernière demande retournée est de Kimberley Strong\"] = (tabDemandesRecus[nbDemAttendu-1].prenom === \"Kimberley\" && tabDemandesRecus[nbDemAttendu-1].nom_famille === \"Strong\");",
									"    tests[\"Dernier demande : id\"] = tabDemandesRecus[nbDemAttendu-1].id === 268;",
									"    tests[\"Dernier demande : date_demande\"] = tabDemandesRecus[nbDemAttendu-1].date_demande === \"2009-08-09\";",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url_base}}/membres/123/demandes",
						"method": "GET",
						"header": [],
						"body": {},
						"description": "Consultation des demandes d'amitié du membre no. 123."
					},
					"response": [
						{
							"id": "a34f5c8e-8213-466a-814e-4717c68103f8",
							"name": "Les 3 demandes d'amitié du membre no. 123.",
							"originalRequest": {
								"url": "{{url_base}}/membres/123/demandes",
								"method": "GET",
								"header": [],
								"body": {}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "text",
							"header": [
								{
									"name": "cache-control",
									"key": "cache-control",
									"value": "no-cache",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"name": "content-length",
									"key": "content-length",
									"value": "267",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"name": "content-type",
									"key": "content-type",
									"value": "application/json; charset=utf-8",
									"description": "The mime type of this content"
								},
								{
									"name": "date",
									"key": "date",
									"value": "Wed, 04 Oct 2017 01:31:50 GMT",
									"description": "The date and time that the message was sent"
								},
								{
									"name": "server",
									"key": "server",
									"value": "Development/2.0",
									"description": "A name for the server"
								}
							],
							"cookie": [],
							"responseTime": 2002,
							"body": "[{\"prenom\": \"Garrett\", \"date_demande\": \"2010-08-31\", \"nom_famille\": \"Meadows\", \"id\": 38}, {\"prenom\": \"Tallulah\", \"date_demande\": \"2010-07-12\", \"nom_famille\": \"Guy\", \"id\": 235}, {\"prenom\": \"Kimberley\", \"date_demande\": \"2009-08-09\", \"nom_famille\": \"Strong\", \"id\": 268}]"
						}
					]
				},
				{
					"name": "{{url_base}}/membres/9999/demandes",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;"
								]
							}
						}
					],
					"request": {
						"url": "{{url_base}}/membres/9999/demandes",
						"method": "GET",
						"header": [],
						"body": {},
						"description": "Consultation des demandes d'amitié d'un membre avec un no de membre qui n'existe pas."
					},
					"response": [
						{
							"id": "790c04c4-037b-4d0a-938d-81490de6d460",
							"name": "404 Not Found : Le no de membre est inexistant.",
							"originalRequest": {
								"url": "{{url_base}}/membres/9999/demandes",
								"method": "GET",
								"header": [],
								"body": {}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "html",
							"_postman_previewtype": "text",
							"header": [
								{
									"name": "cache-control",
									"key": "cache-control",
									"value": "no-cache",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"name": "content-length",
									"key": "content-length",
									"value": "0",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"name": "content-type",
									"key": "content-type",
									"value": "text/html; charset=utf-8",
									"description": "The mime type of this content"
								},
								{
									"name": "date",
									"key": "date",
									"value": "Wed, 04 Oct 2017 01:37:10 GMT",
									"description": "The date and time that the message was sent"
								},
								{
									"name": "server",
									"key": "server",
									"value": "Development/2.0",
									"description": "A name for the server"
								}
							],
							"cookie": [],
							"responseTime": 605,
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "Accepter demande d'amitié",
			"description": "",
			"item": [
				{
					"name": "Suppression demande d'amitié",
					"description": "",
					"item": [
						{
							"name": "{{url_base}}/membres/123/demandes/268",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;"
										]
									}
								}
							],
							"request": {
								"url": "{{url_base}}/membres/123/demandes/268",
								"method": "DELETE",
								"header": [],
								"body": {},
								"description": "Suppression de la demande d'amitié du membre no. 268 faite au membre no. 123."
							},
							"response": [
								{
									"id": "9691604f-ca55-41dc-8df3-cd71f53db59b",
									"name": "204 No Content : La ressource n'existe plus.",
									"originalRequest": {
										"url": "{{url_base}}/membres/123/demandes/268",
										"method": "DELETE",
										"header": [],
										"body": {}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "html",
									"_postman_previewtype": "text",
									"header": [
										{
											"name": "cache-control",
											"key": "cache-control",
											"value": "no-cache",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										},
										{
											"name": "content-type",
											"key": "content-type",
											"value": "text/html; charset=utf-8",
											"description": "The mime type of this content"
										},
										{
											"name": "date",
											"key": "date",
											"value": "Wed, 04 Oct 2017 02:57:25 GMT",
											"description": "The date and time that the message was sent"
										},
										{
											"name": "server",
											"key": "server",
											"value": "Development/2.0",
											"description": "A name for the server"
										}
									],
									"cookie": [],
									"responseTime": 527,
									"body": ""
								}
							]
						},
						{
							"name": "{{url_base}}/membres/123/demandes/268 (redo)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 204\"] = responseCode.code === 204;"
										]
									}
								}
							],
							"request": {
								"url": "{{url_base}}/membres/123/demandes/268",
								"method": "DELETE",
								"header": [],
								"body": {},
								"description": "Suppression de la demande d'amitié du membre no. 268 faite au membre no. 123.\nDonne le même résultat que la première suppression."
							},
							"response": [
								{
									"id": "08a900b8-18ad-428f-87b4-9b4e5de59395",
									"name": "204 No Content : La ressource n'existe plus.",
									"originalRequest": {
										"url": "{{url_base}}/membres/123/demandes/268",
										"method": "DELETE",
										"header": [],
										"body": {}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "html",
									"_postman_previewtype": "text",
									"header": [
										{
											"name": "cache-control",
											"key": "cache-control",
											"value": "no-cache",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										},
										{
											"name": "content-type",
											"key": "content-type",
											"value": "text/html; charset=utf-8",
											"description": "The mime type of this content"
										},
										{
											"name": "date",
											"key": "date",
											"value": "Wed, 04 Oct 2017 02:58:03 GMT",
											"description": "The date and time that the message was sent"
										},
										{
											"name": "server",
											"key": "server",
											"value": "Development/2.0",
											"description": "A name for the server"
										}
									],
									"cookie": [],
									"responseTime": 642,
									"body": ""
								}
							]
						},
						{
							"name": "{{url_base}}/membres/123/demandes",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Content-Type est JSON et UTF-8\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json; charset=utf-8\"; ",
											"",
											"// Récupération des données reçues au format JSON.",
											"var tabDemandesRecus = JSON.parse(responseBody);",
											"",
											"// Taille du tableau de données attendu dans la réponse JSON.",
											"var nbDemAttendu = 2;",
											"tests[\"Nb de demandes retournées\"] = tabDemandesRecus.length === nbDemAttendu;",
											"",
											"// Chargement du schéma de données JSON à partir de l'environnement.",
											"const jsonSchemaTabDemandes = JSON.parse(environment.json_schema_tab_demandes);",
											"// Validation selon le schéma de données JSON.",
											"tests[\"JSON respecte le schéma pour un tableau de demandes\"] = tv4.validate(tabDemandesRecus, jsonSchemaTabDemandes);",
											"if (tv4.error !== null)",
											"    console.log(\"Message de validation schéma JSON (tableau d'amis) : \", tv4.error);",
											"",
											"if (tabDemandesRecus.length >= 1) {",
											"    tests[\"Pas de champs supplémentaires JSON\"] = Object.keys(tabDemandesRecus[0]).length === Object.keys(jsonSchemaTabDemandes.items.properties).length;",
											"}",
											"",
											"// Tests : Première demande:",
											"if (tabDemandesRecus.length >= 1) {",
											"    tests[\"Première demande retournée est de Garrett Meadows\"] = (tabDemandesRecus[0].prenom === \"Garrett\" && tabDemandesRecus[0].nom_famille === \"Meadows\");",
											"    tests[\"Premier demande : id\"] = tabDemandesRecus[0].id === 38;",
											"    tests[\"Premier demande : date_demande\"] = tabDemandesRecus[0].date_demande === \"2010-08-31\";",
											"}",
											"",
											"// Tests : Dernier demande:",
											"if (tabDemandesRecus.length >= nbDemAttendu) {",
											"    tests[\"Dernière demande retournée est de Tallulah Guy\"] = (tabDemandesRecus[nbDemAttendu-1].prenom === \"Tallulah\" && tabDemandesRecus[nbDemAttendu-1].nom_famille === \"Guy\");",
											"    tests[\"Dernier demande : id\"] = tabDemandesRecus[nbDemAttendu-1].id === 235;",
											"    tests[\"Dernier demande : date_demande\"] = tabDemandesRecus[nbDemAttendu-1].date_demande === \"2010-07-12\";",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"url": "{{url_base}}/membres/123/demandes",
								"method": "GET",
								"header": [],
								"body": {},
								"description": "Consultation des demandes d'amitié du membre no. 123 après suppression de la demande d'amitié du membre no.268."
							},
							"response": [
								{
									"id": "039ec502-ed2e-46f7-af97-137545e18929",
									"name": "La demande d'amitié du membre no.268 a bien été supprimée.",
									"originalRequest": {
										"url": "{{url_base}}/membres/123/demandes",
										"method": "GET",
										"header": [],
										"body": {}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "text",
									"header": [
										{
											"name": "cache-control",
											"key": "cache-control",
											"value": "no-cache",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										},
										{
											"name": "content-length",
											"key": "content-length",
											"value": "176",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"name": "content-type",
											"key": "content-type",
											"value": "application/json; charset=utf-8",
											"description": "The mime type of this content"
										},
										{
											"name": "date",
											"key": "date",
											"value": "Wed, 04 Oct 2017 02:30:52 GMT",
											"description": "The date and time that the message was sent"
										},
										{
											"name": "server",
											"key": "server",
											"value": "Development/2.0",
											"description": "A name for the server"
										}
									],
									"cookie": [],
									"responseTime": 582,
									"body": "[{\"prenom\": \"Garrett\", \"id\": 38, \"nom_famille\": \"Meadows\", \"date_demande\": \"2010-08-31\"}, {\"prenom\": \"Tallulah\", \"id\": 235, \"nom_famille\": \"Guy\", \"date_demande\": \"2010-07-12\"}]"
								}
							]
						},
						{
							"name": "{{url_base}}/membres/9999/demandes/268",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;"
										]
									}
								}
							],
							"request": {
								"url": "{{url_base}}/membres/9999/demandes/268",
								"method": "DELETE",
								"header": [],
								"body": {},
								"description": "Suppression d'une demande d'amitié faite avec un no de membre (invité) qui n'existe pas."
							},
							"response": [
								{
									"id": "5ab15e28-81ba-4ace-bb4f-25bce2d0e4f6",
									"name": "404 No Found : Le no de membre (invité) n'existe pas.",
									"originalRequest": {
										"url": "{{url_base}}/membres/9999/demandes/268",
										"method": "DELETE",
										"header": [],
										"body": {}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "html",
									"_postman_previewtype": "text",
									"header": [
										{
											"name": "cache-control",
											"key": "cache-control",
											"value": "no-cache",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										},
										{
											"name": "content-length",
											"key": "content-length",
											"value": "0",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"name": "content-type",
											"key": "content-type",
											"value": "text/html; charset=utf-8",
											"description": "The mime type of this content"
										},
										{
											"name": "date",
											"key": "date",
											"value": "Wed, 04 Oct 2017 02:51:02 GMT",
											"description": "The date and time that the message was sent"
										},
										{
											"name": "server",
											"key": "server",
											"value": "Development/2.0",
											"description": "A name for the server"
										}
									],
									"cookie": [],
									"responseTime": 545,
									"body": ""
								}
							]
						},
						{
							"name": "{{url_base}}/membres/123/demandes/9999",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;"
										]
									}
								}
							],
							"request": {
								"url": "{{url_base}}/membres/123/demandes/9999",
								"method": "DELETE",
								"header": [],
								"body": {},
								"description": "Suppression d'une demande d'amitié faite avec un no de membre (demandeur) qui n'existe pas."
							},
							"response": [
								{
									"id": "dd10ddb2-b572-427e-aa25-55ed1642952e",
									"name": "404 No Found : Le no de membre (demandeur) n'existe pas.",
									"originalRequest": {
										"url": "{{url_base}}/membres/123/demandes/9999",
										"method": "DELETE",
										"header": [],
										"body": {}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "html",
									"_postman_previewtype": "text",
									"header": [
										{
											"name": "cache-control",
											"key": "cache-control",
											"value": "no-cache",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										},
										{
											"name": "content-length",
											"key": "content-length",
											"value": "0",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"name": "content-type",
											"key": "content-type",
											"value": "text/html; charset=utf-8",
											"description": "The mime type of this content"
										},
										{
											"name": "date",
											"key": "date",
											"value": "Thu, 05 Oct 2017 15:20:18 GMT",
											"description": "The date and time that the message was sent"
										},
										{
											"name": "server",
											"key": "server",
											"value": "Development/2.0",
											"description": "A name for the server"
										}
									],
									"cookie": [],
									"responseTime": 1707,
									"body": ""
								}
							]
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Création relation d'amitié",
					"description": "",
					"item": [
						{
							"name": "{{url_base}}/membres/123/amis/268",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 201\"] = responseCode.code === 201;",
											"tests[\"Content-Type est JSON et UTF-8\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json; charset=utf-8\"; ",
											"",
											"// Récupération des données reçues au format JSON.",
											"var relationAmitie = JSON.parse(responseBody);",
											"",
											"// Chargement du schéma de données JSON à partir de l'environnement.",
											"const jsonSchemaRelationAmitie = JSON.parse(environment.json_schema_relation_amitie);",
											"",
											"// Validation selon le schéma de données JSON.",
											"tests[\"JSON respecte le schéma pour une relation d'amitié\"] = tv4.validate(relationAmitie, jsonSchemaRelationAmitie);",
											"if (tv4.error !== null)",
											"    console.log(\"Message de validation schéma JSON (relation d'amitié) : \", tv4.error);",
											"",
											"tests[\"Pas de champs supplémentaires JSON\"] = Object.keys(relationAmitie).length === Object.keys(jsonSchemaRelationAmitie.properties).length;",
											"",
											"// Tests : Objet retourné représentant la relation d'amitié.",
											"tests[\"mem_id_1 et mem_id_2\"] = ((relationAmitie.mem_id_1 === 123 && relationAmitie.mem_id_2 === 268) || (relationAmitie.mem_id_1 === 268 && relationAmitie.mem_id_2 === 123));",
											"tests[\"date_amitie\"] = relationAmitie.date_amitie === \"2017-10-04\";",
											""
										]
									}
								}
							],
							"request": {
								"url": "{{url_base}}/membres/123/amis/268",
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"date_amitie\": \"2017-10-04\"}"
								},
								"description": "Création d'une relation d'amitié entre Zeus Dawson (123) et Kimberley Strong (268)."
							},
							"response": [
								{
									"id": "7fa6930b-08de-4ec9-b644-75e8312acf98",
									"name": "Zeus Dawson (123) et Kimberley Strong (268) sont maintenant amis.",
									"originalRequest": {
										"url": "{{url_base}}/membres/123/amis/268",
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": ""
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"date_amitie\": \"2017-10-04\"}"
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "text",
									"header": [
										{
											"name": "cache-control",
											"key": "cache-control",
											"value": "no-cache",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										},
										{
											"name": "content-length",
											"key": "content-length",
											"value": "67",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"name": "content-type",
											"key": "content-type",
											"value": "application/json; charset=utf-8",
											"description": "The mime type of this content"
										},
										{
											"name": "date",
											"key": "date",
											"value": "Wed, 04 Oct 2017 15:56:56 GMT",
											"description": "The date and time that the message was sent"
										},
										{
											"name": "server",
											"key": "server",
											"value": "Development/2.0",
											"description": "A name for the server"
										}
									],
									"cookie": [],
									"responseTime": 5501,
									"body": "{\n    \"date_amitie\": \"2017-10-04\",\n    \"mem_id_1\": 123,\n    \"mem_id_2\": 268\n}"
								}
							]
						},
						{
							"name": "{{url_base}}/membres/123/amis",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Content-Type est JSON et UTF-8\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json; charset=utf-8\"; ",
											"",
											"// Récupération des données reçues au format JSON.",
											"var tabAmisRecus = JSON.parse(responseBody);",
											"",
											"// Taille du tableau de données attendu dans la réponse JSON.",
											"var nbAmisAttendu = 23;",
											"tests[\"Nb d'amis retournés\"] = tabAmisRecus.length === nbAmisAttendu;",
											"",
											"// Chargement du schéma de données JSON à partir de l'environnement.",
											"const jsonSchemaTabAmis = JSON.parse(environment.json_schema_tab_amis);",
											"// Validation selon le schéma de données JSON.",
											"tests[\"JSON respecte le schéma pour un tableau d'amis\"] = tv4.validate(tabAmisRecus, jsonSchemaTabAmis);",
											"if (tv4.error !== null)",
											"    console.log(\"Message de validation schéma JSON (tableau d'amis) : \", tv4.error);",
											"    ",
											"if (tabAmisRecus.length >= 1) {",
											"    tests[\"Pas de champs supplémentaires JSON\"] = Object.keys(tabAmisRecus[0]).length === Object.keys(jsonSchemaTabAmis.items.properties).length;",
											"}",
											"",
											"// Tests : Le dernier ami est le nouvel ami:",
											"if (tabAmisRecus.length >= nbAmisAttendu) {",
											"    tests[\"Dernier ami retourné est Kimberley Strong\"] = (tabAmisRecus[nbAmisAttendu-1].prenom === \"Kimberley\" && tabAmisRecus[nbAmisAttendu-1].nom_famille === \"Strong\");",
											"    tests[\"Dernier ami : id\"] = tabAmisRecus[nbAmisAttendu-1].id === 268;",
											"    tests[\"Dernier ami : date_amitie\"] = tabAmisRecus[nbAmisAttendu-1].date_amitie === \"2017-10-04\";",
											"}"
										]
									}
								}
							],
							"request": {
								"url": "{{url_base}}/membres/123/amis",
								"method": "GET",
								"header": [],
								"body": {},
								"description": "Vérification que Kimberley Strong (268) est maintenant dans la liste des amis de Zeus Dawson (123)."
							},
							"response": [
								{
									"id": "a591a509-ee07-438c-9328-a0c750371289",
									"name": "Kimberley Strong (268) est maintenant dans la liste des amis de Zeus Dawson (123).",
									"originalRequest": {
										"url": "{{url_base}}/membres/123/amis",
										"method": "GET",
										"header": [],
										"body": {}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "text",
									"header": [
										{
											"name": "cache-control",
											"key": "cache-control",
											"value": "no-cache",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										},
										{
											"name": "content-length",
											"key": "content-length",
											"value": "1968",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"name": "content-type",
											"key": "content-type",
											"value": "application/json; charset=utf-8",
											"description": "The mime type of this content"
										},
										{
											"name": "date",
											"key": "date",
											"value": "Wed, 04 Oct 2017 15:48:04 GMT",
											"description": "The date and time that the message was sent"
										},
										{
											"name": "server",
											"key": "server",
											"value": "Development/2.0",
											"description": "A name for the server"
										}
									],
									"cookie": [],
									"responseTime": 1816,
									"body": "[{\"nom_famille\": \"Barrera\", \"date_amitie\": \"2010-02-12\", \"prenom\": \"Boris\", \"id\": 7}, {\"nom_famille\": \"Horn\", \"date_amitie\": \"2010-12-26\", \"prenom\": \"Callum\", \"id\": 48}, {\"nom_famille\": \"Mooney\", \"date_amitie\": \"2009-07-26\", \"prenom\": \"Zeus\", \"id\": 75}, {\"nom_famille\": \"Sykes\", \"date_amitie\": \"2009-02-11\", \"prenom\": \"Cody\", \"id\": 27}, {\"nom_famille\": \"Shaffer\", \"date_amitie\": \"2010-09-08\", \"prenom\": \"Tyrone\", \"id\": 112}, {\"nom_famille\": \"Odonnell\", \"date_amitie\": \"2009-07-20\", \"prenom\": \"Sebastian\", \"id\": 129}, {\"nom_famille\": \"Booker\", \"date_amitie\": \"2009-09-04\", \"prenom\": \"Keefe\", \"id\": 157}, {\"nom_famille\": \"Pope\", \"date_amitie\": \"2010-01-22\", \"prenom\": \"Amanda\", \"id\": 203}, {\"nom_famille\": \"Morris\", \"date_amitie\": \"2010-12-15\", \"prenom\": \"Hiroko\", \"id\": 208}, {\"nom_famille\": \"Fry\", \"date_amitie\": \"2009-11-11\", \"prenom\": \"Chelsea\", \"id\": 231}, {\"nom_famille\": \"Ryan\", \"date_amitie\": \"2009-02-24\", \"prenom\": \"Kay\", \"id\": 270}, {\"nom_famille\": \"Conrad\", \"date_amitie\": \"2011-01-22\", \"prenom\": \"Mallory\", \"id\": 293}, {\"nom_famille\": \"Gill\", \"date_amitie\": \"2010-07-09\", \"prenom\": \"Rhea\", \"id\": 309}, {\"nom_famille\": \"Lee\", \"date_amitie\": \"2009-12-18\", \"prenom\": \"Hedwig\", \"id\": 321}, {\"nom_famille\": \"Bates\", \"date_amitie\": \"2010-09-13\", \"prenom\": \"Lacy\", \"id\": 377}, {\"nom_famille\": \"Neal\", \"date_amitie\": \"2010-11-08\", \"prenom\": \"Clinton\", \"id\": 171}, {\"nom_famille\": \"Woods\", \"date_amitie\": \"2009-03-01\", \"prenom\": \"Amir\", \"id\": 177}, {\"nom_famille\": \"Hale\", \"date_amitie\": \"2009-10-07\", \"prenom\": \"Ursula\", \"id\": 204}, {\"nom_famille\": \"Kidd\", \"date_amitie\": \"2010-11-05\", \"prenom\": \"Sacha\", \"id\": 258}, {\"nom_famille\": \"Ashley\", \"date_amitie\": \"2010-02-03\", \"prenom\": \"Pamela\", \"id\": 292}, {\"nom_famille\": \"Ewing\", \"date_amitie\": \"2010-06-05\", \"prenom\": \"Orla\", \"id\": 299}, {\"nom_famille\": \"Mullen\", \"date_amitie\": \"2010-08-05\", \"prenom\": \"Emerald\", \"id\": 393}, {\"nom_famille\": \"Strong\", \"date_amitie\": \"2017-10-04\", \"prenom\": \"Kimberley\", \"id\": 268}]"
								}
							]
						},
						{
							"name": "{{url_base}}/membres/268/amis",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Content-Type est JSON et UTF-8\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json; charset=utf-8\"; ",
											"",
											"// Récupération des données reçues au format JSON.",
											"var tabAmisRecus = JSON.parse(responseBody);",
											"",
											"// Taille du tableau de données attendu dans la réponse JSON.",
											"var nbAmisAttendu = 21;",
											"tests[\"Nb d'amis retournés\"] = tabAmisRecus.length === nbAmisAttendu;",
											"",
											"// Chargement du schéma de données JSON à partir de l'environnement.",
											"const jsonSchemaTabAmis = JSON.parse(environment.json_schema_tab_amis);",
											"// Validation selon le schéma de données JSON.",
											"tests[\"JSON respecte le schéma pour un tableau d'amis\"] = tv4.validate(tabAmisRecus, jsonSchemaTabAmis);",
											"if (tv4.error !== null)",
											"    console.log(\"Message de validation schéma JSON (tableau d'amis) : \", tv4.error);",
											"",
											"if (tabAmisRecus.length >= 1) {",
											"    tests[\"Pas de champs supplémentaires JSON\"] = Object.keys(tabAmisRecus[0]).length === Object.keys(jsonSchemaTabAmis.items.properties).length;",
											"}",
											"",
											"// Tests : Le dernier ami est le nouvel ami:",
											"if (tabAmisRecus.length >= nbAmisAttendu) {",
											"    tests[\"Dernier ami retourné est Zeus Dawson\"] = (tabAmisRecus[nbAmisAttendu-1].prenom === \"Zeus\" && tabAmisRecus[nbAmisAttendu-1].nom_famille === \"Dawson\");",
											"    tests[\"Dernier ami : id\"] = tabAmisRecus[nbAmisAttendu-1].id === 123;",
											"    tests[\"Dernier ami : date_amitie\"] = tabAmisRecus[nbAmisAttendu-1].date_amitie === \"2017-10-04\";",
											"}"
										]
									}
								}
							],
							"request": {
								"url": "{{url_base}}/membres/268/amis",
								"method": "GET",
								"header": [],
								"body": {},
								"description": "Vérification que Zeus Dawson (123) est maintenant dans la liste des amis de Kimberley Strong (268)."
							},
							"response": [
								{
									"id": "0a01a5de-874a-4658-9e07-8f22dae3edac",
									"name": "Zeus Dawson (123) est maintenant dans la liste des amis de Kimberley Strong (268).",
									"originalRequest": {
										"url": "{{url_base}}/membres/268/amis",
										"method": "GET",
										"header": [],
										"body": {}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "text",
									"header": [
										{
											"name": "cache-control",
											"key": "cache-control",
											"value": "no-cache",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										},
										{
											"name": "content-length",
											"key": "content-length",
											"value": "1808",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"name": "content-type",
											"key": "content-type",
											"value": "application/json; charset=utf-8",
											"description": "The mime type of this content"
										},
										{
											"name": "date",
											"key": "date",
											"value": "Wed, 04 Oct 2017 15:49:35 GMT",
											"description": "The date and time that the message was sent"
										},
										{
											"name": "server",
											"key": "server",
											"value": "Development/2.0",
											"description": "A name for the server"
										}
									],
									"cookie": [],
									"responseTime": 2899,
									"body": "[{\"nom_famille\": \"Mcintosh\", \"date_amitie\": \"2009-06-26\", \"prenom\": \"Noah\", \"id\": 26}, {\"nom_famille\": \"Kent\", \"date_amitie\": \"2010-05-30\", \"prenom\": \"Malik\", \"id\": 67}, {\"nom_famille\": \"Savage\", \"date_amitie\": \"2010-11-16\", \"prenom\": \"Ralph\", \"id\": 73}, {\"nom_famille\": \"Weeks\", \"date_amitie\": \"2009-01-03\", \"prenom\": \"Christopher\", \"id\": 108}, {\"nom_famille\": \"Bass\", \"date_amitie\": \"2010-03-21\", \"prenom\": \"Oscar\", \"id\": 141}, {\"nom_famille\": \"Boyd\", \"date_amitie\": \"2009-03-13\", \"prenom\": \"Erich\", \"id\": 155}, {\"nom_famille\": \"Witt\", \"date_amitie\": \"2010-02-23\", \"prenom\": \"Lester\", \"id\": 168}, {\"nom_famille\": \"Bailey\", \"date_amitie\": \"2009-02-23\", \"prenom\": \"Jane\", \"id\": 209}, {\"nom_famille\": \"Strong\", \"date_amitie\": \"2009-07-17\", \"prenom\": \"Bethany\", \"id\": 223}, {\"nom_famille\": \"Holcomb\", \"date_amitie\": \"2009-03-27\", \"prenom\": \"Serina\", \"id\": 242}, {\"nom_famille\": \"Oneill\", \"date_amitie\": \"2009-08-12\", \"prenom\": \"Hamish\", \"id\": 70}, {\"nom_famille\": \"Guthrie\", \"date_amitie\": \"2010-09-11\", \"prenom\": \"Caldwell\", \"id\": 148}, {\"nom_famille\": \"Mcintyre\", \"date_amitie\": \"2009-11-13\", \"prenom\": \"Kim\", \"id\": 266}, {\"nom_famille\": \"Murray\", \"date_amitie\": \"2010-07-18\", \"prenom\": \"Cynthia\", \"id\": 294}, {\"nom_famille\": \"Rich\", \"date_amitie\": \"2010-02-12\", \"prenom\": \"Ariana\", \"id\": 306}, {\"nom_famille\": \"Ross\", \"date_amitie\": \"2009-12-27\", \"prenom\": \"Adele\", \"id\": 334}, {\"nom_famille\": \"Harrison\", \"date_amitie\": \"2009-02-11\", \"prenom\": \"Claudia\", \"id\": 396}, {\"nom_famille\": \"Patton\", \"date_amitie\": \"2010-11-30\", \"prenom\": \"Alyssa\", \"id\": 358}, {\"nom_famille\": \"Cote\", \"date_amitie\": \"2009-12-07\", \"prenom\": \"Kerry\", \"id\": 379}, {\"nom_famille\": \"Finch\", \"date_amitie\": \"2009-08-25\", \"prenom\": \"Alea\", \"id\": 398}, {\"nom_famille\": \"Dawson\", \"date_amitie\": \"2017-10-04\", \"prenom\": \"Zeus\", \"id\": 123}]"
								}
							]
						},
						{
							"name": "{{url_base}}/membres/9999/amis/268",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;"
										]
									}
								}
							],
							"request": {
								"url": "{{url_base}}/membres/9999/amis/268",
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"date_amitie\": \"2017-10-04\"}"
								},
								"description": "Tentative de création d'une relation d'amitié avec le premier no. de membre qui n'existe pas."
							},
							"response": [
								{
									"id": "048cc765-af76-42b7-975e-029be8431a6d",
									"name": "404 Not Found : Le premier no. de membre n'existe pas.",
									"originalRequest": {
										"url": "{{url_base}}/membres/9999/amis/268",
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": ""
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"date_amitie\": \"2017-10-04\"}"
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "html",
									"_postman_previewtype": "text",
									"header": [
										{
											"name": "cache-control",
											"key": "cache-control",
											"value": "no-cache",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										},
										{
											"name": "content-length",
											"key": "content-length",
											"value": "0",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"name": "content-type",
											"key": "content-type",
											"value": "text/html; charset=utf-8",
											"description": "The mime type of this content"
										},
										{
											"name": "date",
											"key": "date",
											"value": "Thu, 05 Oct 2017 15:34:00 GMT",
											"description": "The date and time that the message was sent"
										},
										{
											"name": "server",
											"key": "server",
											"value": "Development/2.0",
											"description": "A name for the server"
										}
									],
									"cookie": [],
									"responseTime": 1563,
									"body": ""
								}
							]
						},
						{
							"name": "{{url_base}}/membres/123/amis/9999",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 404\"] = responseCode.code === 404;"
										]
									}
								}
							],
							"request": {
								"url": "{{url_base}}/membres/123/amis/9999",
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"date_amitie\": \"2017-10-04\"}"
								},
								"description": "Tentative de création d'une relation d'amitié avec le deuxième no. de membre qui n'existe pas."
							},
							"response": [
								{
									"id": "aff74d84-6342-44e8-8ea8-4f59a0f0019a",
									"name": "404 Not Found : Le deuxième no. de membre n'existe pas.",
									"originalRequest": {
										"url": "{{url_base}}/membres/123/amis/9999",
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"description": ""
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"date_amitie\": \"2017-10-04\"}"
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "html",
									"_postman_previewtype": "text",
									"header": [
										{
											"name": "cache-control",
											"key": "cache-control",
											"value": "no-cache",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										},
										{
											"name": "content-length",
											"key": "content-length",
											"value": "0",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"name": "content-type",
											"key": "content-type",
											"value": "text/html; charset=utf-8",
											"description": "The mime type of this content"
										},
										{
											"name": "date",
											"key": "date",
											"value": "Thu, 05 Oct 2017 15:35:14 GMT",
											"description": "The date and time that the message was sent"
										},
										{
											"name": "server",
											"key": "server",
											"value": "Development/2.0",
											"description": "A name for the server"
										}
									],
									"cookie": [],
									"responseTime": 567,
									"body": ""
								}
							]
						},
						{
							"name": "{{url_base}}/membres/123/amis/268 (modif date)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Content-Type est JSON et UTF-8\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json; charset=utf-8\"; ",
											"",
											"// Récupération des données reçues au format JSON.",
											"var relationAmitie = JSON.parse(responseBody);",
											"",
											"// Chargement du schéma de données JSON à partir de l'environnement.",
											"const jsonSchemaRelationAmitie = JSON.parse(environment.json_schema_relation_amitie);",
											"",
											"// Validation selon le schéma de données JSON.",
											"tests[\"JSON respecte le schéma pour une relation d'amitié\"] = tv4.validate(relationAmitie, jsonSchemaRelationAmitie);",
											"if (tv4.error !== null)",
											"    console.log(\"Message de validation schéma JSON (relation d'amitié) : \", tv4.error);",
											"",
											"tests[\"Pas de champs supplémentaires JSON\"] = Object.keys(relationAmitie).length === Object.keys(jsonSchemaRelationAmitie.properties).length;",
											"",
											"// Tests : Objet retourné représentant la relation d'amitié.",
											"tests[\"mem_id_1\"] = relationAmitie.mem_id_1 === 123;",
											"tests[\"mem_id_2\"] = relationAmitie.mem_id_2 === 268;",
											"tests[\"date_amitie\"] = relationAmitie.date_amitie === \"2017-10-05\";",
											""
										]
									}
								}
							],
							"request": {
								"url": "{{url_base}}/membres/123/amis/268",
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"description": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"date_amitie\": \"2017-10-05\"}"
								},
								"description": "Modification d'une relation d'amitié existante (nouvelle date)."
							},
							"response": [
								{
									"id": "f8d7fa03-eb9a-4f94-818a-fb27c91a58d6",
									"name": "La date de la relation d'amitié est modifiée mais une nouvelle relation d'amitié n'est pas créée.",
									"originalRequest": {
										"url": "{{url_base}}/membres/123/amis/268",
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"description": ""
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"date_amitie\": \"2017-10-05\"}"
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "text",
									"header": [
										{
											"name": "cache-control",
											"key": "cache-control",
											"value": "no-cache",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										},
										{
											"name": "content-length",
											"key": "content-length",
											"value": "63",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"name": "content-type",
											"key": "content-type",
											"value": "application/json; charset=utf-8",
											"description": "The mime type of this content"
										},
										{
											"name": "date",
											"key": "date",
											"value": "Thu, 05 Oct 2017 17:42:48 GMT",
											"description": "The date and time that the message was sent"
										},
										{
											"name": "server",
											"key": "server",
											"value": "Development/2.0",
											"description": "A name for the server"
										}
									],
									"cookie": [],
									"responseTime": 743,
									"body": "{\"date_amitie\": \"2017-10-05\", \"mem_id_1\": 123, \"mem_id_2\": 268}"
								}
							]
						},
						{
							"name": "{{url_base}}/membres/123/amis (modif date)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Content-Type est JSON et UTF-8\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json; charset=utf-8\"; ",
											"",
											"// Récupération des données reçues au format JSON.",
											"var tabAmisRecus = JSON.parse(responseBody);",
											"",
											"// Taille du tableau de données attendu dans la réponse JSON.",
											"var nbAmisAttendu = 23;",
											"tests[\"Nb d'amis retournés\"] = tabAmisRecus.length === nbAmisAttendu;",
											"",
											"// Chargement du schéma de données JSON à partir de l'environnement.",
											"const jsonSchemaTabAmis = JSON.parse(environment.json_schema_tab_amis);",
											"// Validation selon le schéma de données JSON.",
											"tests[\"JSON respecte le schéma pour un tableau d'amis\"] = tv4.validate(tabAmisRecus, jsonSchemaTabAmis);",
											"if (tv4.error !== null)",
											"    console.log(\"Message de validation schéma JSON (tableau d'amis) : \", tv4.error);",
											"",
											"if (tabAmisRecus.length >= 1) {",
											"    tests[\"Pas de champs supplémentaires JSON\"] = Object.keys(tabAmisRecus[0]).length === Object.keys(jsonSchemaTabAmis.items.properties).length;",
											"}",
											"",
											"// Tests : Le dernier ami est le nouvel ami:",
											"if (tabAmisRecus.length >= nbAmisAttendu) {",
											"    tests[\"Dernier ami retourné est Kimberley Strong\"] = (tabAmisRecus[nbAmisAttendu-1].prenom === \"Kimberley\" && tabAmisRecus[nbAmisAttendu-1].nom_famille === \"Strong\");",
											"    tests[\"Dernier ami : id\"] = tabAmisRecus[nbAmisAttendu-1].id === 268;",
											"    tests[\"Dernier ami : date_amitie\"] = tabAmisRecus[nbAmisAttendu-1].date_amitie === \"2017-10-05\";",
											"}"
										]
									}
								}
							],
							"request": {
								"url": "{{url_base}}/membres/123/amis",
								"method": "GET",
								"header": [],
								"body": {},
								"description": "Vérification que la date d'amitié avec Kimberley Strong (268) a été modifiée."
							},
							"response": [
								{
									"id": "c7a93c93-e268-4e8b-8fdd-cedef7ddbc63",
									"name": "La date d'amitié avec Kimberley Strong (268) est maintenant 2017-10-05.",
									"originalRequest": {
										"url": "{{url_base}}/membres/123/amis",
										"method": "GET",
										"header": [],
										"body": {}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "text",
									"header": [
										{
											"name": "cache-control",
											"key": "cache-control",
											"value": "no-cache",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										},
										{
											"name": "content-length",
											"key": "content-length",
											"value": "1968",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"name": "content-type",
											"key": "content-type",
											"value": "application/json; charset=utf-8",
											"description": "The mime type of this content"
										},
										{
											"name": "date",
											"key": "date",
											"value": "Tue, 17 Oct 2017 18:05:53 GMT",
											"description": "The date and time that the message was sent"
										},
										{
											"name": "server",
											"key": "server",
											"value": "Development/2.0",
											"description": "A name for the server"
										}
									],
									"cookie": [],
									"responseTime": 1323,
									"body": "[{\"id\": 7, \"date_amitie\": \"2010-02-12\", \"nom_famille\": \"Barrera\", \"prenom\": \"Boris\"}, {\"id\": 48, \"date_amitie\": \"2010-12-26\", \"nom_famille\": \"Horn\", \"prenom\": \"Callum\"}, {\"id\": 75, \"date_amitie\": \"2009-07-26\", \"nom_famille\": \"Mooney\", \"prenom\": \"Zeus\"}, {\"id\": 27, \"date_amitie\": \"2009-02-11\", \"nom_famille\": \"Sykes\", \"prenom\": \"Cody\"}, {\"id\": 112, \"date_amitie\": \"2010-09-08\", \"nom_famille\": \"Shaffer\", \"prenom\": \"Tyrone\"}, {\"id\": 129, \"date_amitie\": \"2009-07-20\", \"nom_famille\": \"Odonnell\", \"prenom\": \"Sebastian\"}, {\"id\": 157, \"date_amitie\": \"2009-09-04\", \"nom_famille\": \"Booker\", \"prenom\": \"Keefe\"}, {\"id\": 203, \"date_amitie\": \"2010-01-22\", \"nom_famille\": \"Pope\", \"prenom\": \"Amanda\"}, {\"id\": 208, \"date_amitie\": \"2010-12-15\", \"nom_famille\": \"Morris\", \"prenom\": \"Hiroko\"}, {\"id\": 231, \"date_amitie\": \"2009-11-11\", \"nom_famille\": \"Fry\", \"prenom\": \"Chelsea\"}, {\"id\": 270, \"date_amitie\": \"2009-02-24\", \"nom_famille\": \"Ryan\", \"prenom\": \"Kay\"}, {\"id\": 293, \"date_amitie\": \"2011-01-22\", \"nom_famille\": \"Conrad\", \"prenom\": \"Mallory\"}, {\"id\": 309, \"date_amitie\": \"2010-07-09\", \"nom_famille\": \"Gill\", \"prenom\": \"Rhea\"}, {\"id\": 321, \"date_amitie\": \"2009-12-18\", \"nom_famille\": \"Lee\", \"prenom\": \"Hedwig\"}, {\"id\": 377, \"date_amitie\": \"2010-09-13\", \"nom_famille\": \"Bates\", \"prenom\": \"Lacy\"}, {\"id\": 171, \"date_amitie\": \"2010-11-08\", \"nom_famille\": \"Neal\", \"prenom\": \"Clinton\"}, {\"id\": 177, \"date_amitie\": \"2009-03-01\", \"nom_famille\": \"Woods\", \"prenom\": \"Amir\"}, {\"id\": 204, \"date_amitie\": \"2009-10-07\", \"nom_famille\": \"Hale\", \"prenom\": \"Ursula\"}, {\"id\": 258, \"date_amitie\": \"2010-11-05\", \"nom_famille\": \"Kidd\", \"prenom\": \"Sacha\"}, {\"id\": 292, \"date_amitie\": \"2010-02-03\", \"nom_famille\": \"Ashley\", \"prenom\": \"Pamela\"}, {\"id\": 299, \"date_amitie\": \"2010-06-05\", \"nom_famille\": \"Ewing\", \"prenom\": \"Orla\"}, {\"id\": 393, \"date_amitie\": \"2010-08-05\", \"nom_famille\": \"Mullen\", \"prenom\": \"Emerald\"}, {\"id\": 268, \"date_amitie\": \"2017-10-05\", \"nom_famille\": \"Strong\", \"prenom\": \"Kimberley\"}]"
								}
							]
						},
						{
							"name": "{{url_base}}/membres/268/amis (modif date)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"Content-Type est JSON et UTF-8\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json; charset=utf-8\"; ",
											"",
											"// Récupération des données reçues au format JSON.",
											"var tabAmisRecus = JSON.parse(responseBody);",
											"",
											"// Taille du tableau de données attendu dans la réponse JSON.",
											"var nbAmisAttendu = 21;",
											"tests[\"Nb d'amis retournés\"] = tabAmisRecus.length === nbAmisAttendu;",
											"",
											"// Chargement du schéma de données JSON à partir de l'environnement.",
											"const jsonSchemaTabAmis = JSON.parse(environment.json_schema_tab_amis);",
											"// Validation selon le schéma de données JSON.",
											"tests[\"JSON respecte le schéma pour un tableau d'amis\"] = tv4.validate(tabAmisRecus, jsonSchemaTabAmis);",
											"if (tv4.error !== null)",
											"    console.log(\"Message de validation schéma JSON (tableau d'amis) : \", tv4.error);",
											"",
											"if (tabAmisRecus.length >= 1) {",
											"    tests[\"Pas de champs supplémentaires JSON\"] = Object.keys(tabAmisRecus[0]).length === Object.keys(jsonSchemaTabAmis.items.properties).length;",
											"}",
											"",
											"// Tests : Le dernier ami est le nouvel ami:",
											"if (tabAmisRecus.length >= nbAmisAttendu) {",
											"    tests[\"Dernier ami retourné est Zeus Dawson\"] = (tabAmisRecus[nbAmisAttendu-1].prenom === \"Zeus\" && tabAmisRecus[nbAmisAttendu-1].nom_famille === \"Dawson\");",
											"    tests[\"Dernier ami : id\"] = tabAmisRecus[nbAmisAttendu-1].id === 123;",
											"    tests[\"Dernier ami : date_amitie\"] = tabAmisRecus[nbAmisAttendu-1].date_amitie === \"2017-10-05\";",
											"}"
										]
									}
								}
							],
							"request": {
								"url": "{{url_base}}/membres/268/amis",
								"method": "GET",
								"header": [],
								"body": {},
								"description": "Vérification que la date d'amitié avec Zeus Dawson (123) a été modifiée."
							},
							"response": [
								{
									"id": "1653d1da-3ead-4ee9-9919-9dcc9e1717d5",
									"name": "La date d'amitié avec Zeus Dawson (123) est maintenant 2017-10-05.",
									"originalRequest": {
										"url": "{{url_base}}/membres/268/amis",
										"method": "GET",
										"header": [],
										"body": {}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"_postman_previewtype": "text",
									"header": [
										{
											"name": "cache-control",
											"key": "cache-control",
											"value": "no-cache",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										},
										{
											"name": "content-length",
											"key": "content-length",
											"value": "1808",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"name": "content-type",
											"key": "content-type",
											"value": "application/json; charset=utf-8",
											"description": "The mime type of this content"
										},
										{
											"name": "date",
											"key": "date",
											"value": "Tue, 17 Oct 2017 18:13:07 GMT",
											"description": "The date and time that the message was sent"
										},
										{
											"name": "server",
											"key": "server",
											"value": "Development/2.0",
											"description": "A name for the server"
										}
									],
									"cookie": [],
									"responseTime": 1098,
									"body": "[{\"id\": 26, \"date_amitie\": \"2009-06-26\", \"nom_famille\": \"Mcintosh\", \"prenom\": \"Noah\"}, {\"id\": 67, \"date_amitie\": \"2010-05-30\", \"nom_famille\": \"Kent\", \"prenom\": \"Malik\"}, {\"id\": 73, \"date_amitie\": \"2010-11-16\", \"nom_famille\": \"Savage\", \"prenom\": \"Ralph\"}, {\"id\": 108, \"date_amitie\": \"2009-01-03\", \"nom_famille\": \"Weeks\", \"prenom\": \"Christopher\"}, {\"id\": 141, \"date_amitie\": \"2010-03-21\", \"nom_famille\": \"Bass\", \"prenom\": \"Oscar\"}, {\"id\": 155, \"date_amitie\": \"2009-03-13\", \"nom_famille\": \"Boyd\", \"prenom\": \"Erich\"}, {\"id\": 168, \"date_amitie\": \"2010-02-23\", \"nom_famille\": \"Witt\", \"prenom\": \"Lester\"}, {\"id\": 209, \"date_amitie\": \"2009-02-23\", \"nom_famille\": \"Bailey\", \"prenom\": \"Jane\"}, {\"id\": 223, \"date_amitie\": \"2009-07-17\", \"nom_famille\": \"Strong\", \"prenom\": \"Bethany\"}, {\"id\": 242, \"date_amitie\": \"2009-03-27\", \"nom_famille\": \"Holcomb\", \"prenom\": \"Serina\"}, {\"id\": 70, \"date_amitie\": \"2009-08-12\", \"nom_famille\": \"Oneill\", \"prenom\": \"Hamish\"}, {\"id\": 148, \"date_amitie\": \"2010-09-11\", \"nom_famille\": \"Guthrie\", \"prenom\": \"Caldwell\"}, {\"id\": 266, \"date_amitie\": \"2009-11-13\", \"nom_famille\": \"Mcintyre\", \"prenom\": \"Kim\"}, {\"id\": 294, \"date_amitie\": \"2010-07-18\", \"nom_famille\": \"Murray\", \"prenom\": \"Cynthia\"}, {\"id\": 306, \"date_amitie\": \"2010-02-12\", \"nom_famille\": \"Rich\", \"prenom\": \"Ariana\"}, {\"id\": 334, \"date_amitie\": \"2009-12-27\", \"nom_famille\": \"Ross\", \"prenom\": \"Adele\"}, {\"id\": 396, \"date_amitie\": \"2009-02-11\", \"nom_famille\": \"Harrison\", \"prenom\": \"Claudia\"}, {\"id\": 358, \"date_amitie\": \"2010-11-30\", \"nom_famille\": \"Patton\", \"prenom\": \"Alyssa\"}, {\"id\": 379, \"date_amitie\": \"2009-12-07\", \"nom_famille\": \"Cote\", \"prenom\": \"Kerry\"}, {\"id\": 398, \"date_amitie\": \"2009-08-25\", \"nom_famille\": \"Finch\", \"prenom\": \"Alea\"}, {\"id\": 123, \"date_amitie\": \"2017-10-05\", \"nom_famille\": \"Dawson\", \"prenom\": \"Zeus\"}]"
								}
							]
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}