{
	"info": {
		"_postman_id": "0b27b789-c201-4577-a7f3-41ca67470f1b",
		"name": "Requêtes TP-3, 420-02E-FX Projet API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "lieux",
			"item": [
				{
					"name": "http://localhost:8090/api//membres/3/collections/4/lieux/12",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8090/api//membres/3/collections/4/lieux/12",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"",
								"membres",
								"3",
								"collections",
								"4",
								"lieux",
								"12"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:8090/api//membres/3/collections/4/lieux/12 (lieu existe déjâ)",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8090/api//membres/3/collections/4/lieux/12",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"",
								"membres",
								"3",
								"collections",
								"4",
								"lieux",
								"12"
							]
						}
					},
					"response": []
				},
				{
					"name": "{{url_base}}/membres/3/collections/4/lieux/13",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"nom\": \"pique bois\",\r\n\"date_creation\": \"2019/04/10\",\r\n\"infos\":\"Nocif aux arbres fruitiers\",\r\n\"type_lieu\": \"region_fermee\",\r\n\"coordonnees\":[\r\n{\"latitude\":46.73145895295559,\"longitude\":-72.7709746123594},\r\n{\"latitude\":46.7317714861872,\"longitude\":-72.76858744633614},\r\n{\"latitude\":46.730730927346116,\"longitude\":-72.76814219963967},\r\n{\"latitude\":46.73207298711781,\"longitude\":-72.76888785374581}]}"
						},
						"url": {
							"raw": "{{url_base}}/membres/3/collections/4/lieux/13",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"membres",
								"3",
								"collections",
								"4",
								"lieux",
								"13"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:8090/api//membres/3/collections/4/lieux/12 (lieux non existant dans la collection)",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url_base}}/membres/3/collections/4/lieux/13",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"membres",
								"3",
								"collections",
								"4",
								"lieux",
								"13"
							]
						}
					},
					"response": []
				},
				{
					"name": "{{url_base}}/membres/3/collections/4/lieux/12",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url_base}}/membres/3/collections/4/lieux/12",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"membres",
								"3",
								"collections",
								"4",
								"lieux",
								"12"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:8090/api/membres/2/lieux_non_classes/10",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "localhost:8090/api/membres/2/lieux_non_classes/10",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"membres",
								"2",
								"lieux_non_classes",
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:8090/api/membres/2/lieux_non_classes",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"nom\": \"Champignon tortue\",\"date_creation\": \"2018/04/04\",\"infos\":\"Bolet dorefff - bolet glabrescent\",\"type_lieu\": \"region_fermee\",  \"coordonnees\": [ {\"longitude\": -71.37145727886076,\"latitude\": 46.86923347282557 },{\"longitude\": -71.37111395610685,\"latitude\": \r\n46.86735569590006 },{\"longitude\": -71.36871069682951,\"latitude\": 46.866416782803014},{\"longitude\": -71.36682242168303, \"latitude\":\r\n46.86759042160825 },{ \"longitude\": -71.36939734233732,\"latitude\": 46.869585548685805},{\"longitude\": -71.37145727886076,\"latitude\": \r\n46.86923347282557 } ]}"
						},
						"url": {
							"raw": "localhost:8090/api/membres/2/lieux_non_classes",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"membres",
								"2",
								"lieux_non_classes"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:8090/api//membres/2/lieux_non_classes",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"id\":1,\r\n \"nom\":\"Vulcain\",\r\n\"infos\":\"Papillon marron agrémenté d'un motif en 3/4 de cercle orange à rouge vif\",\r\n\"coordonnees\":[{\"latitude\" :46.735672483895804,\"longitude\":-72.77250883591591},\r\n{\"latitude\" :46.73554380326947,\"longitude\":-72.77233181012093},\r\n{\"latitude\" :46.735378356298696,\"longitude\":-72.77206895363747},\r\n{\"latitude\" :46.73523496851343,\"longitude\":-72.77190265667855},\r\n{\"latitude\" :46.73506216734255,\"longitude\":-72.77166125786721},\r\n{\"latitude\" :46.734793772936655,\"longitude\":-72.77139840138375},\r\n{\"latitude\" :46.73456214381388,\"longitude\":-72.77122137558877},\r\n{\"latitude\" :46.73427904020164,\"longitude\":-72.77094779026925}],\r\n\"date_creation\":\"2019-04-08\",\r\n\"type_lieu\":\"itineraire\"}"
						},
						"url": {
							"raw": "localhost:8090/api//membres/2/lieux_non_classes",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"",
								"membres",
								"2",
								"lieux_non_classes"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:8090/api/membres/1/lieux_non_classes/1",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "localhost:8090/api/membres/1/lieux_non_classes/1",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"membres",
								"1",
								"lieux_non_classes",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:8090/api/membres/4/lieux_non_classes/2\n",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8090/api/membres/4/lieux_non_classes/2?=",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"membres",
								"4",
								"lieux_non_classes",
								"2"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"description": "supprimer un lieu "
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "collections",
			"item": [
				{
					"name": "http://localhost:8090/api/membres/2/collections",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url_base}}/membres/2/collections",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"membres",
								"2",
								"collections"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:8090/api/membres/2/collections",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"nom\":\"oiseaux\"}"
						},
						"url": {
							"raw": "http://localhost:8090/api/membres/2/collections",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"membres",
								"2",
								"collections"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:8090/api/membres/2/collections/3",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8090/api/membres/2/collections/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"membres",
								"2",
								"collections",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:8090/api/membres/4/collections",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"nom\":\"pique bois\"}"
						},
						"url": {
							"raw": "http://localhost:8090/api/membres/4/collections",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"membres",
								"4",
								"collections"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:8090/api/membres/4/collections Copy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"nom\":\"Collection-3\"}"
						},
						"url": {
							"raw": "http://localhost:8090/api/membres/3/collections",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8090",
							"path": [
								"api",
								"membres",
								"3",
								"collections"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "partage",
			"item": []
		},
		{
			"name": "membres",
			"item": [
				{
					"name": "{{url_base}}/membres/ (création membre ayant  1 comme identifiant)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4764a7c7-8e82-4b27-a00f-40cd48355355",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"tests[\"Content-Type est JSON et UTF-8\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json; charset=utf-8\"; ",
									"",
									"// Récupération des données reçues au format JSON.",
									"var membre = JSON.parse(responseBody);",
									"",
									"// Chargement du schema de données JSON à partir de l'environnement.",
									"const jsonSchemaTabMembres = JSON.parse(environment.jsonSchema_post_membres);",
									"",
									"// Validation selon le schema de données JSON.",
									"tests[\"JSON respecte le schema pour un membre\"] = tv4.validate(membre, jsonSchemaTabMembres);",
									"if (tv4.error !== null)",
									"    console.log(\"Message de validation schema JSON membre) : \", tv4.error);",
									"",
									"tests[\"Pas de champs supplémentaires JSON\"] = Object.keys(membre).length === Object.keys(jsonSchemaTabMembres.properties).length;",
									"",
									"// Tests : Objet retourné representant le membre.",
									"tests[\"nom_util\"] = membre.nom_util === \"anita\";",
									"tests[\"courriel\"] = membre.courriel === \"anita@gmail.com\";",
									"",
									"// Vérification de l'en-tête \"Location\":",
									"tests[\"En-tête 'Location'\"] = postman.getResponseHeader(\"Location\") === postman.getEnvironmentVariable(\"url_base\") + \"/membres/\" + membre._id;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url_base}}/membres",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"membres"
							]
						}
					},
					"response": []
				},
				{
					"name": "{{url_base}}/membres/ (création du membre sans un nom d'utilisateur)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "491675d8-d679-4860-8bb0-d985605b62a7",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url_base}}/membres",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"membres"
							]
						}
					},
					"response": []
				},
				{
					"name": "{{url_base}}/membres/ (membre avec un nom d'utilidateur vide)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1694efd3-48ba-407f-939a-e438f795ac40",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"nom_utilisateur\": \"ulrich\",\n\t\"courriel\": \"chant@gmal.com\"\n}"
						},
						"url": {
							"raw": "{{url_base}}/membres",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"membres"
							]
						}
					},
					"response": [
						{
							"name": "http://localhost:8090/api/membres/29 ",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"mem_id\": \"29\",\"nom_utilisateur\": \"  \", \"courriel\": \"chant@gmal.com\", \"mot_passe\": \"qwerty123\"}"
								},
								"url": {
									"raw": "http://localhost:8090/api/membres/29",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8090",
									"path": [
										"api",
										"membres",
										"29"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "connection",
									"value": "keep-alive",
									"name": "connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "content-length",
									"value": "0",
									"name": "content-length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "date",
									"value": "Fri, 10 Nov 2017 20:07:47 GMT",
									"name": "date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "x-powered-by",
									"value": "Express",
									"name": "x-powered-by",
									"description": "Specifies the technology (ASP.NET, PHP, JBoss, e.g.) supporting the web application (version details are often in X-Runtime, X-Version, or X-AspNet-Version)"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "{{url_base}}/membres/ (Création d'un membre avec courriel vide)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": ""
						}
					},
					"response": []
				},
				{
					"name": "{{url_base}}/membres/ (Création membre sans courriel)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "11a03d64-b934-4852-98e7-6c563c13968e",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url_base}}/membres",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"membres"
							]
						}
					},
					"response": []
				},
				{
					"name": "{{url_base}}/membres/ (membre avec un mot de passe vide)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5758235d-bb48-47c6-90a0-94afc06b1465",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url_base}}/membres",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"membres"
							]
						}
					},
					"response": []
				},
				{
					"name": "{{url_base}}/membres/ (Création membre sans mot de passe)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "121a571c-19ea-44e2-bd5b-e104395a15ec",
								"exec": [
									"tests[\"Status code is 400\"] = responseCode.code === 400;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url_base}}/membres",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"membres"
							]
						}
					},
					"response": []
				},
				{
					"name": "{{url_base}}/membres (consultation du membre ayant 1 pour identifiant.)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "07ad7b46-129f-4bbf-a1f5-e540cdcedb8c",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Content-Type est JSON et UTF-8\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json; charset=utf-8\"; ",
									"",
									"// Récupération des données reçues au format JSON.",
									"//var membre = JSON.parse(responseBody);",
									"",
									"// Chargement du schema de données JSON à partir de l'environnement.",
									"const jsonSchemaTabMembres = JSON.parse(environment.jsonSchemaTabMembres);",
									"",
									"// Validation selon le schema de données JSON.",
									"tests[\"JSON respecte le schema pour un membre\"] = tv4.validate(membre, jsonSchemaTabMembres);",
									"if (tv4.error !== null)",
									"    console.log(\"Message de validation schema JSON membre) : \", tv4.error);",
									"",
									"tests[\"Pas de champs supplémentaires JSON\"] = Object.keys(membre).length === Object.keys(jsonSchemaTabMembres.properties).length;",
									"",
									"// Tests : Objet retourné representant le membre.",
									"tests[\"_id\"] = membre._id === 1;",
									"tests[\"nom_util\"] = membre.nom_util === \"anita\";",
									"tests[\"courriel\"] = membre.courriel === \"anita@gmal.com\";",
									"",
									"// Vérification de l'en-tête \"Location\":",
									"tests[\"En-tête 'Location'\"] = postman.getResponseHeader(\"Location\") === postman.getEnvironmentVariable(\"url_base\") + \"/membres/\" + membre._id;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url_base}}/membres/1",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"membres",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost:8090/api/membres/5 (consultation d'un membre inexistant)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e296a16a-02d6-4148-b57d-c74b9d9b6161",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url_base}}/membres/5",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"membres",
								"5"
							]
						},
						"description": "Membre inexistant"
					},
					"response": []
				}
			]
		},
		{
			"name": "connexion",
			"item": [
				{
					"name": "{{url_base}}/connexion (Connexion avec un nom d'utilisateur et un mot de passe valide.)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5d3ec55c-b0a6-4e3e-9b7f-09420067ac75",
								"exec": [
									"let response = pm.response.json();\r",
									"    \r",
									"pm.environment.set(\"token\", response.token);\r",
									"\r",
									"tests[\"Status code is 201\"] = responseCode.code === 201;\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url_base}}/connexion",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"connexion"
							]
						}
					},
					"response": []
				},
				{
					"name": "{{url_base}}/connexion(Tentative de connexion avec un mot de passe invalide.)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "762f1e2a-2750-465d-9db3-7db94c361ec7",
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url_base}}/connexion",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"connexion"
							]
						},
						"description": "Tentative de connexion avec un mot de passe invalide."
					},
					"response": []
				}
			]
		}
	]
}